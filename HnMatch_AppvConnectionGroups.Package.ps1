#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 36c03612-8189-46ec-90ad-4898319206e9
# Source File: c:\SAPIEN\PowerShell Studio\Projects\HnMatch_AppvConnectionGroups\HnMatch_AppvConnectionGroups.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
swIAAB+LCAAAAAAABACdUlFPwjAQfifhPyx9NBnbgCxbHEsUMuQBNYz4Smp3uGnXNl2H4K+3Wwdi
0Jj4ctfvenff3ddGKyB8B/IwwwrH/Z5lRY+SvwJRVnpgJJecFR+QTVCCaQWoDSYFVSAn6GogKu+6
saVxmXHevqTtYdvaSlsTyYGKgdor1BJpqieQVcFZPBx4kXME3Z1mgcUsHvnEHfne0A68ILTHPhA7
dHFmj4MwGHnh0PUhjJwuuSvtNlgfBMRu5JzDY3NOM01nOedsVQc6aN3WBdWbuyhOFZaqFs0yhuu3
TGsFW5DACCQ1I0qvM0Fpzt/tJS5YwmW50aqg+Igajf5omOZYNvqvZQ0/tl+wHX8De075M6a6vYdi
c66ap/jnuNNcZ3zNe4IXAxtglDspbdCDLF4KhmmTcI9LiO/YEiuSb26E2E05Y9AyziWvRTOr0MWR
c1HV70XOt0/6CXwxav2zAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.154
     Generated on:       18.03.2019 15:13
     Generated by:       admin
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YQAAAB+LCAAAAAAABACzCUpNzi9LLap0SSxJVAAyijPz82yVjPUMlex4uRQUbPyLMtMz8xJz3DJz
Uv0Sc1PtgksSi0pKC/QKiott9DFkebls9JGNtAMAoyFkEGEAAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
	
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load moduRead and check requirements)
	$Global:Exitcode = 0
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	
	#if ([bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544"))
	#{
		
		
		[string]$Global:wkApp = Get-ScriptDirectory
		
		If ((Show-MainForm_psf) -eq 'OK')
		{
		}
#	}
#	else
#	{
#		
#		Msg-User -MsgHead "Admin rights needed !" -Msg "You have to start the program as an Administrator" -Action "OK"
#		Stop-Process -Name 'HnAppvTool'
#	}
	#	}
	Write-Host 'ExitCode:'$Global:Exitcode
	$script:ExitCode = $Global:Exitcode #Set the exit code for the Packager
}

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyRead()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$Lbl_GetFiRead = New-Object 'System.Windows.Forms.Label'
	$Bbr_AppvfiRead = New-Object 'System.Windows.Forms.Button'
	$Tbx_AppvFiRead = New-Object 'System.Windows.Forms.TextBox'
	$Btn_Font = New-Object 'System.Windows.Forms.Button'
	$Btn_BackColor = New-Object 'System.Windows.Forms.Button'
	$Lbl_Color = New-Object 'System.Windows.Forms.Label'
	$Lbl_ObjectIsolation = New-Object 'System.Windows.Forms.Label'
	$Lbl_BPlugins = New-Object 'System.Windows.Forms.Label'
	$Lbl_ComOptions = New-Object 'System.Windows.Forms.Label'
	$Lbl_Vfs = New-Object 'System.Windows.Forms.Label'
	$Btn_LagTweaktxt = New-Object 'System.Windows.Forms.Button'
	$Grp_RunOnAll = New-Object 'System.Windows.Forms.GroupBox'
	$Chk_ExcludeAllObjectsIsolation = New-Object 'System.Windows.Forms.CheckBox'
	$Chk_EnableFullVFSWriteAc = New-Object 'System.Windows.Forms.CheckBox'
	$Chk_DiableBrowserPlugin = New-Object 'System.Windows.Forms.CheckBox'
	$Grp_ComOptions = New-Object 'System.Windows.Forms.GroupBox'
	$Grp_InteGratedComSettings = New-Object 'System.Windows.Forms.GroupBox'
	$Chk_OutOfProcessComObjec = New-Object 'System.Windows.Forms.CheckBox'
	$Chk_ComInProcess = New-Object 'System.Windows.Forms.CheckBox'
	$Rbu_Isolated = New-Object 'System.Windows.Forms.RadioButton'
	$Rbu_Integrated = New-Object 'System.Windows.Forms.RadioButton'
	$Rbu_ComOFF = New-Object 'System.Windows.Forms.RadioButton'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$buttonExitConsoleToo = New-Object 'System.Windows.Forms.Button'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$Fbm_AppvFolder = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$openfiledialog2 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$columnheader1 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader2 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader3 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader4 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader5 = New-Object 'System.Windows.Forms.ColumnHeader'
	$colordialog1 = New-Object 'System.Windows.Forms.ColorDialog'
	$fontdialog1 = New-Object 'System.Windows.Forms.FontDialog'
	$openfiledialog3 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#changeregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load= {
		#TODO: Initialize Form Controls here
		$Global:TweakLine = @()
		$Lbl_BPlugins.Text = 'Enabled'
		$Lbl_ComOptions.Text = 'Isolated'
		$Lbl_ObjectIsolation.Text = ''
		$Lbl_Vfs.Text = 'false'
		Write-Host $global:wkApp
		
		$ThisApp = $global:wkApp + '\HnMatch_AppvConnectionGroups.exe' 
		$MainForm.Text += '   Fileversion:' + [System.Diagnostics.FileVersionInfo]::GetVersionInfo($ThisApp).FileVersion
		$listview1.Items.Clear()
		
		$subItem = @($Lbl_Vfs.Text; $Lbl_ComOptions.Text; $Lbl_BPlugins.Text; $Lbl_ObjectIsolation.Text)
		$Item = "Your Choices:"
		Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem
		Frm_VisChoise
	}
	
	$buttonCallChildForm_Click={
		#TODO: Place custom script here
		if((Show-ChildForm_psf) -eq 'OK')
		{
			
		}
	}
	
	
	
	
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	#endregion
	
	
	
	
	Function Frm_FindSettings {
		Write-Host 'Starting Frm_Findsettings'
		#$Li = $listView1.ite
		$mSvar = ""
		$listview1.BeginUpdate()
		$listview1.Items.Clear()
		
		$subItem = @($Lbl_Vfs.Text; $Lbl_ComOptions.Text; $Lbl_BPlugins.Text; $Lbl_ObjectIsolation.Text)
		$Item = "Your Choices:"
		Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem
		#	return "*"
		
		If ($listbox1.Items.Count -gt 0) {
			Write-Host "Frm_Findsettings:Going trough the list"
			For ($i = 0; $i -lt $listbox1.Items.Count; $i++) {
				Get-XmlFromAppV -folder $Tbx_AppvFiRead.Text -AppvPakke $listbox1.Items[$i]
				Write-Host $listbox1.Items[$i]
				$global:appvfile = $Tbx_AppvFiRead.Text + "\AppxManifest.xml"
				[xml]$global:xml = Get-Content -Path $global:appvfile
				$subItem = @(''.'', '', '', '')
				
				$Item = [string]$listbox1.Items[$i]
				$subItem[0] = 'false'
				If ($global:xml.Package.Properties.FullVFSWriteMode -eq $true) { $subItem[0] = 'true' }
				
				$a = $global:xml.Package.ExtensionsConfiguration.COM.Mode
				Write-Host 'A:' $a
				
				Switch ($a) {
					'Off' { $subItem[1] = "ComOff" }
					'Integrated' { $subItem[1] += "Integrated" }
					Default { $subItem[1]= "Isolated" }
				}
				If ($a -eq 'integrated') {
					$mSvar = 'Integrated:'
					$b = 'IP,'
					If ($global:xml.Package.ExtensionsConfiguration.COM.IntegratedCOMAttributes.InProcessEnabled -eq 'false') { $b = '' }
					$c = 'OOP'
					If ($global:xml.Package.ExtensionsConfiguration.COM.IntegratedCOMAttributes.OutOfProcessEnabled -eq 'false') { $c = '' }
					$mSvar += $b + $c
					$subItem[1]= $mSvar
				}
				$a = $global:xml.Package.Extensions.Extension.BrowserPlugin.subcategory.count
				$b = "Disabled"
				If ($a -gt 0) { $b = "Enabled" }
				$subItem[2] = $b
				$subItem[3] = [String]$global:xml.Package.Extensions.Extension.objects.notisolate.Object.name
				
				#Write-Host $subItem
				Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem
			}
			$a = @()
			ForEach ($item In $listview1.Items) {
				$item.Checked = $true
				$a += $item.SubItems[0].text + '|' + $item.SubItems[1].text + '|' + $item.SubItems[2].text + '|' + $item.SubItems[3].text + '|' + $item.SubItems[4].text
			}
			$Filename = $Tbx_AppvFiRead.Text + '\prop_' + (get-Date).ToShortDateString().Replace('.', '') + '_' + (Get-date).ToLongTimeString().Replace(':', '') + '.txt'
			Write-Host $Filename
			$a | Out-File -FilePath $filename -Encoding unicode
			Frm_VisChoise
			$listview1.EndUpdate()
			
			$a = @()
			#		ForEach ($item In $listview1.Items) {
			#			$a += $item.SubItems[0]+";" + $item.SubItems[1] + ";" + $item.SubItems[2] + ";" + $item.SubItems[3] + ";"
			#			$item.Checked = $true
			#		}
			#		$a| Out-File -FilePath ($Tbf_AppvFiRead.Text +"\out.txt") -Encoding unicode
		}
	}
	
	
	
	
	
	$buttonExitConsoleToo_Click = {
		Stop-Process -Name 'HnMatch_AppvConnectionGroups'
	}
	
	
	
	Function Frm_ComCheck {
		$Grp_InteGratedComSettings.Visible = $false
		If ($Rbu_ComOFF.Checked) {
			$a = "0|6|23|24|25"
			$Lbl_ComOptions.Text = 'ComOff'
		}
		If ($Rbu_Integrated.Checked) {
			$a = "0|6|23|24|31|32"
			$Lbl_ComOptions.Text = 'Integrated:'
			If ($Chk_ComInProcess.Checked) {
				$a += "|33"
				$Lbl_ComOptions.Text +='IP,'
			} Else {
				$a += "|34"
			}
			If ($Chk_OutOfProcessComObjec.Checked) {
				$a += "|35"
				$Lbl_ComOptions.Text += 'OOP'
			} Else { $a += "|36" }
			$Grp_InteGratedComSettings.Visible = $true
		}
		If ($Rbu_Isolated.Checked) {
			$a = "0|6"
			$Lbl_ComOptions.Text = 'Isolated'
			}
		$Global:TweakLine = $a.split('|')
		
	}
	
	$Rbu_ComOFF_CheckedChanged = {
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	
	$Rbu_Isolated_CheckedChanged={
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
		
	}
	
	$Rbu_Integrated_CheckedChanged={
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	$Chk_ComInProcess_CheckedChanged={
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	$Chk_OutOfProcessComObjec_CheckedChanged = {
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	$Btn_LagTweaktxt_Click = {
		$MainForm.Enabled=$false
		Frm_ComCheck
		Frm_VisChoise
		#TODO: Place custom script here
		$com = $global:wkApp + '\Tweakmal.txt'
		$tweakFile = $Tbx_AppvFiRead.Text + '\Tweakappv.txt'
		$a = Get-Content -Path $com
		$c = @()
		#Write-Host $global:TweakLine
		$global:TweakLine | ForEach-Object{
			
			$c += $a[$_]
		}
		#$c | ForEach-Object{ Write-Host $_ }
		Out-File -FilePath $tweakFile -InputObject $c -Encoding unicode
		$a = $global:wkApp + '\Tweakappv.exe'
		$arg1 = '/batchfileupdate'
		Write-Host ''
		Write-Host '-- Com-options ----------------------------------------------'
		ForEach ($item In $listview1.Items) {
			If ($item.Checked) {
				If ($item.SubItems[2].Text -ne $Lbl_ComOptions.Text) {
					Write-Host $item.Text':' $item.SubItems[2].Text $Lbl_ComOptions.Text
					$arg2 = $Tbx_AppvFiRead.Text + '\' + $item.Text
					$q = & $a $arg1 $arg2 $tweakFile
					
					Wait-Process -Name "TweakAppv.exe*32"
					#$q | ForEach-Object { Write-Host $_ }
				}
			}
			#		ForEach ($i In $item.SubItems) {
			#			Write-Host $i.Text
			#		}
		}
		Write-Host ''
		Write-Host '-- Excludeobjects---------------------------------------------'
		
		$arg1 = '/update'
		$arg5 = $global:wkApp + '\ExcludeAllObjectsFromIsolation_Delete.xsl'
		$arg6 = $global:wkApp + '\ExcludeAllObjectsFromIsolation_Delete.xsl'
		If ($Chk_ExcludeAllObjectsIsolation.Checked) {
			$arg5 = $global:wkApp + '\ExcludeAllObjectsFromIsolation.xsl'
		}
		ForEach ($item In $listview1.Items) {
			If ($item.Checked) {
				If ($item.SubItems[4].Text -ne $Lbl_ObjectIsolation.Text) {
					Write-Host $item.Text':' $item.SubItems[4].Text   $Lbl_ObjectIsolation.Text
					$arg2 = $Tbx_AppvFiRead.Text + '\' + $item.Text
					$arg3 = "/TransformManifest"
					$arg4 = "AppxManifest.xml"
					$q = & $a $arg1 $arg2 $arg3 $arg4 $arg6
					Wait-Process -Name "TweakAppv.exe*32"
					$q = & $a $arg1 $arg2 $arg3 $arg4 $arg5
					Wait-Process -Name "TweakAppv.exe*32"
				}
			}
		}
		Write-Host ''
		Write-Host '-- Browser-Plugin----------------------------------------------'
		$arg1 = '/update'
		$arg5 = $global:wkApp + '\BrowserPlugin_Disable.xsl'
		If ($Chk_DiableBrowserPlugin.Checked) {
			ForEach ($item In $listview1.Items) {
				If ($item.Checked) {
					If ($item.SubItems[3].Text -ne $Lbl_BPlugins.Text) {
						Write-Host $item.Text':' $item.SubItems[3].Text   $Lbl_BPlugins.Text
						$arg2 = $Tbx_AppvFiRead.Text + '\' + $item.Text
						$arg3 = "/TransformManifest"
						$arg4 = "AppxManifest.xml"
						$q = & $a $arg1 $arg2 $arg3 $arg4 $arg5
						Wait-Process -Name "TweakAppv.exe*32"
					}
				}
			}
		}
		
		Write-Host ''
		Write-Host '-- VFS----------------------------------------------'
		$arg1 = '/update'
		$arg5 = $global:wkApp + '\VFS.xsl'
		$arg6 = 'false'
		
		If ($Chk_EnableFullVFSWriteAc.Checked) { $arg6 = 'true' }
		ForEach ($item In $listview1.Items) {
			If ($item.Checked) {
				If ($item.SubItems[1].Text -ne $Lbl_Vfs.Text) {
					Write-Host $item.Text':' $item.SubItems[1].Text $Lbl_Vfs.Text
					$arg2 = $Tbx_AppvFiRead.Text + '\' + $item.Text
					$arg3 = "/TransformManifest"
					$arg4 = "AppxManifest.xml"
					$q = & $a $arg1 $arg2 $arg3 $arg4 $arg5 "-VFS" $arg6
					Write-Host $a $arg1 $arg2 $arg3 $arg4 $arg5 "-VFS" $arg6
					Wait-Process -Name "TweakAppv.exe*32"
				}
			}
			
		}
		
		Write-Host ''
		Write-Host 'Start oppdater lista----------------------------------------------------------------------'
		Frm_FindSettings
		Write-Host 'Ferdig'
		$MainForm.Enabled = $true
	}
	
	
	Function Frm_VisChoise {
		Param (
			[array]$BColor = @($Lbl_Color.BackColor; $Lbl_Color1.ForeColor; $Lbl_Color1.BackColor; $Lbl_Color.ForeColor),
			[array]$FColor = @($Lbl_Color.ForeColor; $Lbl_Color1.BackColor; $Lbl_Color1.ForeColor; $Lbl_Color.BackColor)
		)
		$listView1.Items[0].Selected = $true	
		$Li = $listView1.Items[0]
	#	$subItem = @($Lbl_Vfs.Text; $Lbl_ComOptions.Text; $Lbl_BPlugins.Text; $Lbl_ObjectIsolation.Text)
	#	$Item = "Your Choices:"
		$Li.SubItems[1].Text = $Lbl_Vfs.Text
		$Li.SubItems[2].Text = $Lbl_ComOptions.Text
		$Li.SubItems[3].Text = $Lbl_BPlugins.Text
		$Li.SubItems[4].Text = $Lbl_ObjectIsolation.Text
		$Li.Checked=$false
	#	$Li.SubItems[1].ForeColor = $Fcolor[0]
	#	$Li.SubItems[1].BackColor = $BColor[0]
	#	$Li.SubItems[2].ForeColor = $Fcolor[1]
	#	$Li.SubItems[2].BackColor = $BColor[1]
	#	$Li.SubItems[3].ForeColor = $Fcolor[2]
	#	$Li.SubItems[3].BackColor = $BColor[2]
	#	
	#	$Li.SubItems[4].ForeColor = $Fcolor[3]
	#	$Li.SubItems[4].BackColor = $BColor[3]
		
		$Li.BackColor = $bcolor[0]
		$Li.ForeColor = $fColor[0]
		$Li.Font = $Lbl_Color.Font
		$listview1.BeginUpdate()
		$ListView1.AutoResizeColumns(1) # base width on content length
		$listview1.EndUpdate()
	}
	
	
	
	$Chk_DiableBrowserPlugin_CheckedChanged={
		#TODO: Place custom script here
		$Lbl_BPlugins.Text = 'Enabled'
		If ($Chk_DiableBrowserPlugin.Checked) { $Lbl_BPlugins.Text = 'Disabled' }
	  Frm_VisChoise
	#	Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem	
	}
	
	$Chk_EnableFullVFSWriteAc_CheckedChanged={
		#TODO: Place custom script here
		$Lbl_Vfs.text = 'false'
		if ($Chk_EnableFullVFSWriteAc.Checked){$Lbl_Vfs.text = 'true'}
		Frm_VisChoise
	}
	
	$Chk_ExcludeAllObjectsIsolation_CheckedChanged= {
		#TODO: Place custom script here
		$Lbl_ObjectIsolation.Text = ""
		If ($Chk_ExcludeAllObjectsIsolation.Checked) { $Lbl_ObjectIsolation.Text = '*' }
		Frm_VisChoise
	}
	
	$Btn_BackColor_Click={
		#TODO: Place custom script here
		$colordialog1.Color = $Lbl_Color.BackColor
		If ($colordialog1.ShowDialog() -eq 'OK') {
			$Lbl_Color.BackColor = $colordialog1.Color
		}
	}
	
	$Btn_Font_Click={
		#TODO: Place custom script here
		$fontdialog1.ShowColor = $true
		$fontdialog1.ShowEffects = $true
		$fontdialog1.Font = $Lbl_Color.Font
		$fontdialog1.Color = $Lbl_Color.ForeColor
		If ($fontdialog1.ShowDialog() -eq 'OK') {
			$Lbl_Color.Font = $fontdialog1.Font
			$Lbl_Color.ForeColor = $fontdialog1.Color
			Frm_VisChoise
		}
		
	}
	
	$Btn_ForeColor_Click = {
		$colordialog1.Color = $Lbl_Color.ForeColor
		If ($colordialog1.ShowDialog() -eq 'OK') {
			$Lbl_Color.ForeColor = $colordialog1.Color
			Frm_VisChoise
		}
	}
	
	$Bbr_AppvfiRead_Click2= {
		If ($openfiledialog3.ShowDialog() -eq 'OK') {
			$MainForm.Enabled = $false
			$Tbx_AppvFiRead.Text = $openfiledialog3.FileName
			$appvfiRead = @()
			$b = $Tbx_AppvFiRead.Text.Split('\')
			If ($b[$b.Count - 1].EndsWith('.appv')) {
				$c = $Tbx_AppvFiRead.Text.Substring(0, $Tbx_AppvFiRead.Text.Length - ($b[$b.Count - 1].Length) - 1)
				$Tbx_AppvFiRead.Text = $c
				$a = Get-ChildItem -path $c -Filter "*.appv"
				If ($a -ne $null) { $appvFiRead += $a }
				Update-ListBox -ListBox $listbox1 -Items $appvFiRead
				Frm_FindSettings
				$MainForm.Enabled = $true
			}
		}
	}
	$openfiledialog3_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_Tbx_AppvFiRead = $Tbx_AppvFiRead.Text
		$script:MainForm_Chk_ExcludeAllObjectsIsolation = $Chk_ExcludeAllObjectsIsolation.Checked
		$script:MainForm_Chk_EnableFullVFSWriteAc = $Chk_EnableFullVFSWriteAc.Checked
		$script:MainForm_Chk_DiableBrowserPlugin = $Chk_DiableBrowserPlugin.Checked
		$script:MainForm_Chk_OutOfProcessComObjec = $Chk_OutOfProcessComObjec.Checked
		$script:MainForm_Chk_ComInProcess = $Chk_ComInProcess.Checked
		$script:MainForm_Rbu_Isolated = $Rbu_Isolated.Checked
		$script:MainForm_Rbu_Integrated = $Rbu_Integrated.Checked
		$script:MainForm_Rbu_ComOFF = $Rbu_ComOFF.Checked
		$script:MainForm_listview1 = $listview1.SelectedItems
		$script:MainForm_listview1_Checked = $listview1.CheckedItems
		$script:MainForm_listbox1 = $listbox1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$Bbr_AppvfiRead.remove_Click($Bbr_AppvfiRead_Click2)
			$Btn_Font.remove_Click($Btn_Font_Click)
			$Btn_BackColor.remove_Click($Btn_BackColor_Click)
			$Btn_LagTweaktxt.remove_Click($Btn_LagTweaktxt_Click)
			$Chk_ExcludeAllObjectsIsolation.remove_CheckedChanged($Chk_ExcludeAllObjectsIsolation_CheckedChanged)
			$Chk_EnableFullVFSWriteAc.remove_CheckedChanged($Chk_EnableFullVFSWriteAc_CheckedChanged)
			$Chk_DiableBrowserPlugin.remove_CheckedChanged($Chk_DiableBrowserPlugin_CheckedChanged)
			$Chk_OutOfProcessComObjec.remove_CheckedChanged($Chk_OutOfProcessComObjec_CheckedChanged)
			$Chk_ComInProcess.remove_CheckedChanged($Chk_ComInProcess_CheckedChanged)
			$Rbu_Isolated.remove_CheckedChanged($Rbu_Isolated_CheckedChanged)
			$Rbu_Integrated.remove_CheckedChanged($Rbu_Integrated_CheckedChanged)
			$Rbu_ComOFF.remove_CheckedChanged($Rbu_ComOFF_CheckedChanged)
			$buttonExitConsoleToo.remove_Click($buttonExitConsoleToo_Click)
			$MainForm.remove_Load($MainForm_Load)
			$openfiledialog3.remove_FileOk($openfiledialog3_FileOk)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$Grp_RunOnAll.SuspendLayout()
	$Grp_ComOptions.SuspendLayout()
	$Grp_InteGratedComSettings.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($Lbl_GetFiRead)
	$MainForm.Controls.Add($Bbr_AppvfiRead)
	$MainForm.Controls.Add($Tbx_AppvFiRead)
	$MainForm.Controls.Add($Btn_Font)
	$MainForm.Controls.Add($Btn_BackColor)
	$MainForm.Controls.Add($Lbl_Color)
	$MainForm.Controls.Add($Lbl_ObjectIsolation)
	$MainForm.Controls.Add($Lbl_BPlugins)
	$MainForm.Controls.Add($Lbl_ComOptions)
	$MainForm.Controls.Add($Lbl_Vfs)
	$MainForm.Controls.Add($Btn_LagTweaktxt)
	$MainForm.Controls.Add($Grp_RunOnAll)
	$MainForm.Controls.Add($listview1)
	$MainForm.Controls.Add($buttonExitConsoleToo)
	$MainForm.Controls.Add($listbox1)
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.AutoScroll = $True
	$MainForm.AutoScrollMinSize = '940, 300'
	$MainForm.ClientSize = '946, 452'
	$MainForm.Location = '600, 50'
	$MainForm.Margin = '4, 4, 4, 4'
	$MainForm.MinimumSize = '962, 491'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'Manual'
	$MainForm.Text = 'Update ConnectionGroup Com-settings'
	$MainForm.add_Load($MainForm_Load)
	#
	# Lbl_GetFiRead
	#
	$Lbl_GetFiRead.AutoSize = $True
	$Lbl_GetFiRead.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold, Underline'
	$Lbl_GetFiRead.ForeColor = 'Maroon'
	$Lbl_GetFiRead.Location = '22, 13'
	$Lbl_GetFiRead.Name = 'Lbl_GetFiRead'
	$Lbl_GetFiRead.Size = '182, 17'
	$Lbl_GetFiRead.TabIndex = 20
	$Lbl_GetFiRead.Text = 'Choose one .Appv file from folder:'
	$Lbl_GetFiRead.UseCompatibleTextRendering = $True
	#
	# Bbr_AppvfiRead
	#
	$Bbr_AppvfiRead.Location = '19, 33'
	$Bbr_AppvfiRead.Name = 'Bbr_AppvfiRead'
	$Bbr_AppvfiRead.Size = '30, 23'
	$Bbr_AppvfiRead.TabIndex = 1
	$Bbr_AppvfiRead.Text = '...'
	$Bbr_AppvfiRead.UseCompatibleTextRendering = $True
	$Bbr_AppvfiRead.UseVisualStyleBackColor = $True
	$Bbr_AppvfiRead.add_Click($Bbr_AppvfiRead_Click2)
	#
	# Tbx_AppvFiRead
	#
	$Tbx_AppvFiRead.AutoCompleteMode = 'SuggestAppend'
	$Tbx_AppvFiRead.AutoCompleteSource = 'FiReadystem'
	$Tbx_AppvFiRead.Enabled = $False
	$Tbx_AppvFiRead.Location = '55, 36'
	$Tbx_AppvFiRead.Name = 'Tbx_AppvFiRead'
	$Tbx_AppvFiRead.Size = '414, 20'
	$Tbx_AppvFiRead.TabIndex = 0
	#
	# Btn_Font
	#
	$Btn_Font.Anchor = 'Top, Right'
	$Btn_Font.Location = '715, 33'
	$Btn_Font.Name = 'Btn_Font'
	$Btn_Font.Size = '109, 23'
	$Btn_Font.TabIndex = 19
	$Btn_Font.Text = 'Font , ForeColor'
	$Btn_Font.UseCompatibleTextRendering = $True
	$Btn_Font.UseVisualStyleBackColor = $True
	$Btn_Font.add_Click($Btn_Font_Click)
	#
	# Btn_BackColor
	#
	$Btn_BackColor.Anchor = 'Top, Right'
	$Btn_BackColor.Location = '830, 33'
	$Btn_BackColor.Name = 'Btn_BackColor'
	$Btn_BackColor.Size = '104, 23'
	$Btn_BackColor.TabIndex = 18
	$Btn_BackColor.Text = 'BackColor'
	$Btn_BackColor.UseCompatibleTextRendering = $True
	$Btn_BackColor.UseVisualStyleBackColor = $True
	$Btn_BackColor.add_Click($Btn_BackColor_Click)
	#
	# Lbl_Color
	#
	$Lbl_Color.Anchor = 'Top, Right'
	$Lbl_Color.BackColor = 'Yellow'
	$Lbl_Color.BorderStyle = 'Fixed3D'
	$Lbl_Color.Font = 'Verdana, 9pt'
	$Lbl_Color.ForeColor = 'Maroon'
	$Lbl_Color.ImageAlign = 'BottomCenter'
	$Lbl_Color.Location = '497, 33'
	$Lbl_Color.Name = 'Lbl_Color'
	$Lbl_Color.Size = '212, 23'
	$Lbl_Color.TabIndex = 15
	$Lbl_Color.Text = ' Your choices'
	$Lbl_Color.TextAlign = 'MiddleCenter'
	$Lbl_Color.UseCompatibleTextRendering = $True
	#
	# Lbl_ObjectIsolation
	#
	$Lbl_ObjectIsolation.Anchor = 'Bottom, Left'
	$Lbl_ObjectIsolation.AutoSize = $True
	$Lbl_ObjectIsolation.Font = 'Verdana, 8.25pt'
	$Lbl_ObjectIsolation.Location = '580, 348'
	$Lbl_ObjectIsolation.Name = 'Lbl_ObjectIsolation'
	$Lbl_ObjectIsolation.Size = '90, 18'
	$Lbl_ObjectIsolation.TabIndex = 14
	$Lbl_ObjectIsolation.Text = 'ObjectIsolation'
	$Lbl_ObjectIsolation.UseCompatibleTextRendering = $True
	$Lbl_ObjectIsolation.Visible = $False
	#
	# Lbl_BPlugins
	#
	$Lbl_BPlugins.Anchor = 'Bottom, Left'
	$Lbl_BPlugins.AutoSize = $True
	$Lbl_BPlugins.Font = 'Verdana, 8.25pt'
	$Lbl_BPlugins.Location = '580, 398'
	$Lbl_BPlugins.Name = 'Lbl_BPlugins'
	$Lbl_BPlugins.Size = '52, 18'
	$Lbl_BPlugins.TabIndex = 13
	$Lbl_BPlugins.Text = 'BPlugins'
	$Lbl_BPlugins.UseCompatibleTextRendering = $True
	$Lbl_BPlugins.Visible = $False
	#
	# Lbl_ComOptions
	#
	$Lbl_ComOptions.Anchor = 'Bottom, Left'
	$Lbl_ComOptions.AutoSize = $True
	$Lbl_ComOptions.Font = 'Verdana, 8.25pt'
	$Lbl_ComOptions.Location = '580, 423'
	$Lbl_ComOptions.Name = 'Lbl_ComOptions'
	$Lbl_ComOptions.Size = '73, 18'
	$Lbl_ComOptions.TabIndex = 12
	$Lbl_ComOptions.Text = 'ComOptions'
	$Lbl_ComOptions.UseCompatibleTextRendering = $True
	$Lbl_ComOptions.Visible = $False
	#
	# Lbl_Vfs
	#
	$Lbl_Vfs.Anchor = 'Bottom, Left'
	$Lbl_Vfs.AutoSize = $True
	$Lbl_Vfs.Font = 'Verdana, 8.25pt'
	$Lbl_Vfs.Location = '580, 372'
	$Lbl_Vfs.Name = 'Lbl_Vfs'
	$Lbl_Vfs.Size = '26, 18'
	$Lbl_Vfs.TabIndex = 11
	$Lbl_Vfs.Text = 'VFS'
	$Lbl_Vfs.UseCompatibleTextRendering = $True
	$Lbl_Vfs.Visible = $False
	#
	# Btn_LagTweaktxt
	#
	$Btn_LagTweaktxt.Anchor = 'Bottom, Right'
	$Btn_LagTweaktxt.Font = 'Verdana, 14.25pt, style=Bold'
	$Btn_LagTweaktxt.Location = '689, 348'
	$Btn_LagTweaktxt.Name = 'Btn_LagTweaktxt'
	$Btn_LagTweaktxt.Size = '245, 44'
	$Btn_LagTweaktxt.TabIndex = 10
	$Btn_LagTweaktxt.Text = 'Compile'
	$Btn_LagTweaktxt.UseCompatibleTextRendering = $True
	$Btn_LagTweaktxt.UseVisualStyleBackColor = $True
	$Btn_LagTweaktxt.add_Click($Btn_LagTweaktxt_Click)
	#
	# Grp_RunOnAll
	#
	$Grp_RunOnAll.Controls.Add($Chk_ExcludeAllObjectsIsolation)
	$Grp_RunOnAll.Controls.Add($Chk_EnableFullVFSWriteAc)
	$Grp_RunOnAll.Controls.Add($Chk_DiableBrowserPlugin)
	$Grp_RunOnAll.Controls.Add($Grp_ComOptions)
	$Grp_RunOnAll.Anchor = 'Bottom, Left'
	$Grp_RunOnAll.Location = '9, 338'
	$Grp_RunOnAll.Name = 'Grp_RunOnAll'
	$Grp_RunOnAll.Size = '545, 106'
	$Grp_RunOnAll.TabIndex = 9
	$Grp_RunOnAll.TabStop = $False
	$Grp_RunOnAll.UseCompatibleTextRendering = $True
	#
	# Chk_ExcludeAllObjectsIsolation
	#
	$Chk_ExcludeAllObjectsIsolation.Location = '308, 70'
	$Chk_ExcludeAllObjectsIsolation.Name = 'Chk_ExcludeAllObjectsIsolation'
	$Chk_ExcludeAllObjectsIsolation.Size = '186, 16'
	$Chk_ExcludeAllObjectsIsolation.TabIndex = 3
	$Chk_ExcludeAllObjectsIsolation.Text = 'Exclude all object from isolation'
	$Chk_ExcludeAllObjectsIsolation.UseCompatibleTextRendering = $True
	$Chk_ExcludeAllObjectsIsolation.UseVisualStyleBackColor = $True
	$Chk_ExcludeAllObjectsIsolation.add_CheckedChanged($Chk_ExcludeAllObjectsIsolation_CheckedChanged)
	#
	# Chk_EnableFullVFSWriteAc
	#
	$Chk_EnableFullVFSWriteAc.Location = '308, 54'
	$Chk_EnableFullVFSWriteAc.Name = 'Chk_EnableFullVFSWriteAc'
	$Chk_EnableFullVFSWriteAc.Size = '186, 16'
	$Chk_EnableFullVFSWriteAc.TabIndex = 2
	$Chk_EnableFullVFSWriteAc.Text = 'Enable Full VFS write access'
	$Chk_EnableFullVFSWriteAc.UseCompatibleTextRendering = $True
	$Chk_EnableFullVFSWriteAc.UseVisualStyleBackColor = $True
	$Chk_EnableFullVFSWriteAc.add_CheckedChanged($Chk_EnableFullVFSWriteAc_CheckedChanged)
	#
	# Chk_DiableBrowserPlugin
	#
	$Chk_DiableBrowserPlugin.Location = '308, 38'
	$Chk_DiableBrowserPlugin.Name = 'Chk_DiableBrowserPlugin'
	$Chk_DiableBrowserPlugin.Size = '231, 16'
	$Chk_DiableBrowserPlugin.TabIndex = 1
	$Chk_DiableBrowserPlugin.Text = 'Disable Browser Plugin (can not enable)'
	$Chk_DiableBrowserPlugin.UseCompatibleTextRendering = $True
	$Chk_DiableBrowserPlugin.UseVisualStyleBackColor = $True
	$Chk_DiableBrowserPlugin.add_CheckedChanged($Chk_DiableBrowserPlugin_CheckedChanged)
	#
	# Grp_ComOptions
	#
	$Grp_ComOptions.Controls.Add($Grp_InteGratedComSettings)
	$Grp_ComOptions.Controls.Add($Rbu_Isolated)
	$Grp_ComOptions.Controls.Add($Rbu_Integrated)
	$Grp_ComOptions.Controls.Add($Rbu_ComOFF)
	$Grp_ComOptions.Location = '8, 19'
	$Grp_ComOptions.Name = 'Grp_ComOptions'
	$Grp_ComOptions.Size = '274, 77'
	$Grp_ComOptions.TabIndex = 0
	$Grp_ComOptions.TabStop = $False
	$Grp_ComOptions.Text = 'COM-Options'
	$Grp_ComOptions.UseCompatibleTextRendering = $True
	#
	# Grp_InteGratedComSettings
	#
	$Grp_InteGratedComSettings.Controls.Add($Chk_OutOfProcessComObjec)
	$Grp_InteGratedComSettings.Controls.Add($Chk_ComInProcess)
	$Grp_InteGratedComSettings.Location = '84, 15'
	$Grp_InteGratedComSettings.Name = 'Grp_InteGratedComSettings'
	$Grp_InteGratedComSettings.Size = '184, 56'
	$Grp_InteGratedComSettings.TabIndex = 3
	$Grp_InteGratedComSettings.TabStop = $False
	$Grp_InteGratedComSettings.Text = 'Integrated ComSettings'
	$Grp_InteGratedComSettings.UseCompatibleTextRendering = $True
	$Grp_InteGratedComSettings.Visible = $False
	#
	# Chk_OutOfProcessComObjec
	#
	$Chk_OutOfProcessComObjec.Location = '10, 36'
	$Chk_OutOfProcessComObjec.Name = 'Chk_OutOfProcessComObjec'
	$Chk_OutOfProcessComObjec.Size = '165, 16'
	$Chk_OutOfProcessComObjec.TabIndex = 1
	$Chk_OutOfProcessComObjec.Text = 'OutOfProcess ComObjects'
	$Chk_OutOfProcessComObjec.UseCompatibleTextRendering = $True
	$Chk_OutOfProcessComObjec.UseVisualStyleBackColor = $True
	$Chk_OutOfProcessComObjec.add_CheckedChanged($Chk_OutOfProcessComObjec_CheckedChanged)
	#
	# Chk_ComInProcess
	#
	$Chk_ComInProcess.Location = '10, 20'
	$Chk_ComInProcess.Name = 'Chk_ComInProcess'
	$Chk_ComInProcess.Size = '159, 16'
	$Chk_ComInProcess.TabIndex = 0
	$Chk_ComInProcess.Text = 'In Process Com Objects'
	$Chk_ComInProcess.UseCompatibleTextRendering = $True
	$Chk_ComInProcess.UseVisualStyleBackColor = $True
	$Chk_ComInProcess.add_CheckedChanged($Chk_ComInProcess_CheckedChanged)
	#
	# Rbu_Isolated
	#
	$Rbu_Isolated.Checked = $True
	$Rbu_Isolated.Location = '6, 51'
	$Rbu_Isolated.Name = 'Rbu_Isolated'
	$Rbu_Isolated.Size = '80, 16'
	$Rbu_Isolated.TabIndex = 2
	$Rbu_Isolated.TabStop = $True
	$Rbu_Isolated.Text = 'Isolated'
	$Rbu_Isolated.UseCompatibleTextRendering = $True
	$Rbu_Isolated.UseVisualStyleBackColor = $True
	$Rbu_Isolated.add_CheckedChanged($Rbu_Isolated_CheckedChanged)
	#
	# Rbu_Integrated
	#
	$Rbu_Integrated.Location = '6, 35'
	$Rbu_Integrated.Name = 'Rbu_Integrated'
	$Rbu_Integrated.Size = '80, 16'
	$Rbu_Integrated.TabIndex = 1
	$Rbu_Integrated.Text = 'Integrated'
	$Rbu_Integrated.UseCompatibleTextRendering = $True
	$Rbu_Integrated.UseVisualStyleBackColor = $True
	$Rbu_Integrated.add_CheckedChanged($Rbu_Integrated_CheckedChanged)
	#
	# Rbu_ComOFF
	#
	$Rbu_ComOFF.Location = '6, 19'
	$Rbu_ComOFF.Name = 'Rbu_ComOFF'
	$Rbu_ComOFF.Size = '80, 16'
	$Rbu_ComOFF.TabIndex = 0
	$Rbu_ComOFF.Text = 'ComOFF'
	$Rbu_ComOFF.UseCompatibleTextRendering = $True
	$Rbu_ComOFF.UseVisualStyleBackColor = $True
	$Rbu_ComOFF.add_CheckedChanged($Rbu_ComOFF_CheckedChanged)
	#
	# listview1
	#
	$listview1.Anchor = 'Top, Bottom, Left, Right'
	$listview1.AutoArrange = $False
	$listview1.BackgroundImageTiled = $True
	$listview1.CheckBoxes = $True
	[void]$listview1.Columns.Add($columnheader1)
	[void]$listview1.Columns.Add($columnheader2)
	[void]$listview1.Columns.Add($columnheader3)
	[void]$listview1.Columns.Add($columnheader4)
	[void]$listview1.Columns.Add($columnheader5)
	$listview1.Font = 'Verdana, 9pt'
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '19, 61'
	$listview1.Margin = '1, 1, 1, 1'
	$listview1.MinimumSize = '800, 264'
	$listview1.Name = 'listview1'
	$listview1.ShowGroups = $False
	$listview1.Size = '915, 264'
	$listview1.TabIndex = 8
	$listview1.UseCompatibReadtateImageBehavior = $False
	$listview1.View = 'Details'
	#
	# buttonExitConsoleToo
	#
	$buttonExitConsoleToo.Anchor = 'Bottom, Right'
	$buttonExitConsoleToo.Font = 'Verdana, 14.25pt, style=Bold'
	$buttonExitConsoleToo.Location = '689, 398'
	$buttonExitConsoleToo.Name = 'buttonExitConsoleToo'
	$buttonExitConsoleToo.Size = '245, 43'
	$buttonExitConsoleToo.TabIndex = 7
	$buttonExitConsoleToo.Text = 'Exit (Console too)'
	$buttonExitConsoleToo.UseCompatibleTextRendering = $True
	$buttonExitConsoleToo.UseVisualStyleBackColor = $True
	$buttonExitConsoleToo.add_Click($buttonExitConsoleToo_Click)
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '5, 61'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '10, 264'
	$listbox1.TabIndex = 5
	$listbox1.Visible = $False
	#
	# Fbm_AppvFolder
	#
	$Fbm_AppvFolder.InitialDirectory = 'C:\Temp\calc'
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = 'txt'
	$openfiledialog1.Filter = 'Appv fiRead (.appv)|*.appv'
	$openfiledialog1.ShowHelp = $True
	#
	# openfiledialog2
	#
	$openfiledialog2.DefaultExt = 'txt'
	$openfiledialog2.Filter = 'Text File (.txt)|*.txt|All FiRead|*.*'
	$openfiledialog2.ShowHelp = $True
	#
	# columnheader1
	#
	$columnheader1.Text = 'AppvPackage'
	$columnheader1.Width = 165
	#
	# columnheader2
	#
	$columnheader2.Text = 'VFS'
	$columnheader2.Width = 50
	#
	# columnheader3
	#
	$columnheader3.Text = 'Com-Options'
	$columnheader3.Width = 120
	#
	# columnheader4
	#
	$columnheader4.Text = 'B.Plugins'
	$columnheader4.Width = 65
	#
	# columnheader5
	#
	$columnheader5.Text = 'Object names excluded from Isolation (*=ALL)'
	$columnheader5.Width = 4000
	#
	# colordialog1
	#
	#
	# fontdialog1
	#
	#
	# openfiledialog3
	#
	$openfiledialog3.DefaultExt = 'appv'
	$openfiledialog3.Filter = 'Appv(.Appv)|*.Appv'
	$openfiledialog3.ShowHelp = $True
	$openfiledialog3.Title = 'Choose one  .appv file '
	$openfiledialog3.add_FileOk($openfiledialog3_FileOk)
	$Grp_InteGratedComSettings.ResumeLayout()
	$Grp_ComOptions.ResumeLayout()
	$Grp_RunOnAll.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global VariabRead and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	Function Msg-User {
		Param (
			[String]$MsgHead,
			[Array]$Msg,
			[string]$Action = 'OKCancel'
			#'OK', 'AbortRetryIgnore', 'YesNoCancel', 'YesNo', 'RetryCancel'.''
		)
		For ($i = 0; $i -lt $Msg.count; $i++)
		{
			$msg[$i] += "`r`n "
		}
		
		Return [System.Windows.MessageBox]::Show($msg, $MsgHead, $Action, 'Asterisk')
	}
	
	#region XML
	
	Function Get-XmlFromAppV {
		Param (
			[string]$folder,
			[string]$AppvPakke
		)
		$AppxManifest = $folder + "\AppxManifest.xml"
		If (Test-Path $AppxManifest) { Remove-Item $AppxManifest | Out-Null }
		$arg1 = $folder + "\" + $AppvPakke
		$arg3 = 'AppxManifest.xml'
		$arg4 = '-o"' + $folder + '"'
		$arg5 = '-y'
		$b = $Global:wkApp + "\7-Zip\7z.exe"
		#Write-Host $b 'x' $arg1"|"$arg3"|"$arg4"|" '-bso0' '-bse0' '-aoa' '-bd' '-y'
		&$b 'x' $arg1 $arg3 $arg4 '-bso0' '-bse0' '-aoa' '-bd' '-y'
		Return (Test-Path $AppxManifest)
	}
	
	Function Get-AppxManifestXml {
		Param (
			[string]$xmlfile
		)
		[int]$Global:NsNr = 0
		[array]$Global:NsNames = @()
		[hashtable]$Global:NsNa = @{ }
		[hashtable]$Global:NsNode = @{ }
		[hashtable]$Global:NodeType = @{ }
		[array]$Global:Allnodes = @{ }
		$a = (Read-AppxManifestXml -xmlfile $xmlfile)
		If ($a -eq 'ok') {
			$Global:Allnodes = $Global:Allnodes | sort-Object
			Return $Global:Allnodes
		} Else {
			Return $a
		}
	}
	
	
	Function Get-Endenode {
		Param (
			[string]$NodePath
		)
		#sjekk for nodenavn som inneholder[ .'] og ender med ['] - (Det som er inni [])
		If ($NodePath -match ".'" -and $NodePath.EndsWith("'")) {
			$AttributeName = $NodePath.Split('.')[-2 .. -1] -join { '.' } | ForEach-Object{ $_.replace("'", '') }
		} Else {
			$AttributeName = $NodePath.Split('.')[-1]
		}
		Return $AttributeName
	}
	
	Function Get-NsName {
		$Global:NsNr += 1
		$nsName = 'a' + $Global:NsNr
		$Global:NsNames += $nsName
		Return $nsName
	}
	
	Function Get-XmlElementsAttributeValue {
		Param (
			[string]$NodePath,
			[string]$DeleteAttributes = 'N'
		)
		$c = 1
		If ($NodePath -match ".'" -and $NodePath.EndsWith("'")) {
			$AttributeName = $NodePath.Split('.')[-2 .. -1] -join { '.' } | ForEach-Object{ $_.replace("'", '') }
			$c = 3
		} Else {
			$AttributeName = $NodePath.Split('.')[-1]
		}
		$NodePath = $NodePath.Substring(0, $NodePath.Length - $AttributeName.Length - $c)
		[string]$fullyQualifiedNodePath = Set-FullyQualifiedXmlNodePath -NodePath $NodePath
		$node = $Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns)
		If ($node -and $node.$AttributeName) {
			If ($DeleteAttributes -ne 'N') {
				$node.RemoveAttribute($AttributeName)
				Return $null
			} Else { Return $node.$AttributeName }
		} Else { Return $null }
	}
	
	Function Get-XmlNode {
		Param (
			[string]$NodePath,
			[string]$Childnodes = ''
		)
		[string]$fullyQualifiedNodePath = Set-FullyQualifiedXmlNodePath -NodePath $NodePath
		If ($Childnodes -ne '') {
			$Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns).ChildNodes >$Childnodes
		}
		$node = $Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns)
		Return $node
	}
	
	Function Get-XmlNodesDeskNy {
		Param (
			[string]$NodePath,
			[string]$filch = '',
			[string]$Filnode = ''
		)
		[string]$a = Set-FullyQualifiedXmlNodePath $NodePath
		[string[]]$n = (($Global:Xml.SelectNodes($a, $Global:ns) | Get-Member -MemberType Property | Format-Table -Property name) | out-string -stream) -notmatch '^$' | Select-Object -Skip 2
		[string[]]$d = (($Global:Xml.SelectNodes($a, $Global:ns) | Get-Member -MemberType Property | Format-Table -Property definition) | out-string -stream) -notmatch '^$' | Select-Object -Skip 2
		$tmp2 = '.'
		$Node = Get-XmlNode -NodePath $NodePath -Childnodes $filCn
		If ($NodePath -eq '') { $tmp2 = '' }
		For ($j = 0; $j -lt $n.Count; $j++) {
			$tmp = 'com'
			#Hrite-Host '275 j:'$j           
			If ($n[$j].split('.').count -gt 1) { $n[$j] = "'" + [string]$n[$j].trim() + "'" }
			#if ($d[$j] -like 'system.object*'){$tmp='obj.'}
			If ($d[$j] -like 'system*') { $tmp = 'xml.' }
			If ($n[$j] -like '#commen*') { $tmp = 'com.' }
			If ($d[$j] -like 'string*') { $tmp = 'val.' }
			If ($tmp -eq 'xml.') {
				$p = $NodePath + $tmp2 + [string]$n[$j].Trim()
				$q = $p.Split('.')[-1]
				$nsValue = $node.$q.NamespaceURI
				#Hrite-Host '284'$p'| ns:'$nsValue'-'
				$tmp3 = Set-NsName -NsValue $nsValue -NodePath $p
				$c = Get-XmlNode -NodePath $p
				[string]$b = $c.NodeType
				If ($b -eq 'Element' -or $b -eq 'Document') {
					$tmp = 'xml.'
				} Else {
					$tmp = 'val.'
					#Hrite-Host '296 Nodetype:'$b 'j:'$j
				}
			}
			$n[$j] = $tmp + $NodePath + $tmp2 + [string]$n[$j].Trim()
			$d[$j] = $d[$j] + ' | ' + $n[$j]
		}
		If ($Filnode -ne '') {
			$d | out-file $Filnode
		}
		Return [array]$n
	}
	
	Function Get-XmlValCom {
		Param (
			[array]$Found,
			[String]$Sjk
		)
		[array]$n = @()
		For ($j = 0; $j -lt $Found.Count; $j++) {
			[string]$h = $Found[$j]
			[int]$q = $h.Length
			If ($h.Length -igt 3) {
				#Hrite-Host 'h:'$h' sjk:'$sjk' l:'$q
				If ($h.Substring(0, 4) -eq $sjk) {
					$n += [string]$h.Substring(4, $h.Length - 4)
				}
			}
		}
		Return $n
	}
	Function Read-AppxManifestXml {
		Param (
			[string]$xmlfile
		)
		If (-not (Test-Path $xmlfile)) {
			Return ('Can't find:' + $xmlfile)
		}
		$Forst = 0
		[xml]$Global:Xml = get-content -Path $XmlFile
		[System.Xml.XmlNamespaceManager]$Global:Ns = New-Object System.Xml.XmlNamespaceManager($Global:xml.NameTable)
		$a = Set-NsName -NsValue $Global:Xml.DocumentElement.NamespaceURI -NodePath '/'
		$Global:Allnodes = @()
		$XmlNoder = @()
		$ValNoder = @()
		$ComNoder = @()
		$FoundNodes = @('xml.')
		Do {
			$fil = ''
			[array]$Global:Allnodes += $FoundNodes | ForEach-Object{ If ($_ -ne 'val.xml') { $_ } }
			#$chknodes = @()
			[array]$chknodes = Get-XmlValCom -Found $FoundNodes -Sjk 'xml.'
			If ($Forst -lt 3) {
				Write-Host $Forst '<-- nr : chknodes -->' $chknodes ' GA:' $Global:Allnodes
			}
			
			If ($Forst -eq 1) {
				Write-Host $global:XmlNoden
				$Global:XmlNoden = $chknodes[0]
			}
			
			$Forst += 1
			If ($chknodes.count -lt 1) { Break }
			[array]$XmlNoder += $chknodes
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'val.'
			If ($TmpNoder.Count -gt 0) { [array]$ValNoder += $TmpNoder }
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'com.'
			If ($TmpNoder.Count -gt 0) { [array]$ComNoder += $TmpNoder }
			$FoundNodes = @()
			For ($i = 0; $i -lt $chknodes.Count; $i++) {
				$noden = [string]$chknodes[$i]
				$Filnode = ''
				$Filch = ''
				$TmpNoder = Get-XmlNodesDeskNy -NodePath $noden -filch $filch -Filnode $FilNode
				$Fil = ''
				$FoundNodes += $TmpNoder
			}
		} Until ($FoundNodes.count -lt 1)
		Return ('ok')
		
		$XmlNodesRap = @()
		$a = $null
		For ($i = 1; $i -lt $Xmlnoder.Count; $i++) {
			[string]$q = $Xmlnoder[$i]
			[string]$fullyQualifiedNodePath = Set-FullyQualifiedXmlNodePath -NodePath $q
			$XmlNodesRap += '--- ' + $q + '----'
			$XmlNodesRap += $Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns)
		}
		$Fil = $Global:Folders.Root + 'xmlnodesRap.txt'
		$XmlNodesRap >$Fil
		$valueNodesRep = @()
		For ($i = 1; $i -lt $ValNoder.Count; $i++) {
			[string]$q = $ValNoder[$i]
			$Res = Get-XmlElementsAttributeValue -NodePath $q
			$Res = $Res | ForEach-Object{ $q + ' : ' + $_ }
			$valueNodesRep += $Res
		}
		$Fil = $Global:Folders + 'valueNodesRep.txt'
		$valueNodesRep >$Fil
	}
	
	Function Read-AppxManifestXml {
		Param (
			[string]$xmlfile
		)
		If (-not (Test-Path $xmlfile)) {
			Return ('Can't find:' + $xmlfile)
		}
		$Forst = 0
		[xml]$Global:Xml = get-content -Path $XmlFile
		[System.Xml.XmlNamespaceManager]$Global:Ns = New-Object System.Xml.XmlNamespaceManager($Global:xml.NameTable)
		$a = Set-NsName -NsValue $Global:Xml.DocumentElement.NamespaceURI -NodePath '/'
		$Global:Allnodes = @()
		$XmlNoder = @()
		$ValNoder = @()
		$ComNoder = @()
		$FoundNodes = @('xml.')
		Do {
			$fil = ''
			[array]$Global:Allnodes += $FoundNodes | ForEach-Object{ If ($_ -ne 'val.xml') { $_ } }
			[array]$chknodes = Get-XmlValCom -Found $FoundNodes -Sjk 'xml.'
			If ($Forst -lt 3) {
				#Write-Host $Forst '<-- nr : chknodes -->' $chknodes ' GA:' $Global:Allnodes
			}
			
			If ($Forst -eq 1) { $Global:XmlNoden = $chknodes[0] }
			
			$Forst += 1
			If ($chknodes.count -lt 1) { Break }
			[array]$XmlNoder += $chknodes
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'val.'
			If ($TmpNoder.Count -gt 0) { [array]$ValNoder += $TmpNoder }
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'com.'
			If ($TmpNoder.Count -gt 0) { [array]$ComNoder += $TmpNoder }
			$FoundNodes = @()
			For ($i = 0; $i -lt $chknodes.Count; $i++) {
				$noden = [string]$chknodes[$i]
				$Filnode = ''
				$Filch = ''
				$TmpNoder = Get-XmlNodesDeskNy -NodePath $noden -filch $filch -Filnode $FilNode
				$Fil = ''
				$FoundNodes += $TmpNoder
			}
		} Until ($FoundNodes.count -lt 1)
		Return ('ok')
	}
	
	Function Set-FullyQualifiedXmlNodePath {
		Param (
			[String]$NodePath
		)
		If ($Nodepath -eq '') { Return '/' }
		[array]$a = $NodePath.Split('.')
		[int]$b = $NodePath.Split('.').count
		[string]$c = ''
		[string]$d = ''
		For ($i = 0; $i -lt $b; $i++) {
			$d += $a[$i]
			$c += '/' + $Global:NsNode.$d + ':' + $a[$i]
		}
		Return $c
	}
	
	Function Set-NodeType {
		Param (
			$Ntype,
			[string]$NodePath
		)
		$nodename = $NodePath
		#Hrite-Host $q ':' $Found[$j]":" $p
		If ($nodename -like ".") {
			$nodename = $nodename | ForEach-Object{ $_.replace('.', '') }
		}
		#Hrite-Host 'Ntype:'$nodename
		$Glabal:NodeType.Add($nodename, $NType)
		Return 'ok'
	}
	
	Function Set-NsName {
		Param (
			[String]$NsValue,
			[String]$NodePath
		)
		
		If ($NsValue.Length -lt 4) {
			$NsValue = $Global:NsNa.[string]$Global:NsNames[0]
			#Hrite-Host '63':$NodePath
		}
		If ($NsValue.Length -gt 100) {
			$NsValue = $Global:NsNa.[string]$Global:NsNames[0]
			#Hrite-Host '63':$NsValue
		}
		
		$a = 0
		$c = $NodePath.Split('.').Count
		For ($j = 0; $j -lt $Global:NsNames.Count; $j++) {
			If ($Global:NsNa.[string]$Global:NsNames[$j] -eq $NsValue) { $a = 1; Break }
		}
		$nsName = 'a' + ($j + 1)
		$nodename = $Nodepath
		If ($c -gt 1) { $nodename = $NodePath | ForEach-Object{ $_.replace('.', '') } }
		If ($a -eq 0) {
			#Hrite-Host '77'$NsValue
			#Hrite-Host '77'$NodePath
			#Pause
			$b = Get-NsName
			$Global:NS.AddNamespace($b, $nsValue)
			$nsName = 'a' + $Global:NsNr
			$Global:NsNa.Add($nsName, $nsValue)
		}
		$Global:NsNode.Add($nodename, $nsName)
		#Hrite-Host '86'$nodename' :'$nsName
		Return 'ok'
	}
	$Global:Wk = ''
	
	#------ HjelpeArrays for Xml ------
	[xml]$Global:xml = New-Object System.Xml.XmlDocument
	[int]$Global:NsNr = 0
	[array]$Global:NsNames = @()
	[hashtable]$Global:NsNa = @{ }
	[hashtable]$Global:NsNode = @{ }
	[hashtable]$Global:NodeType = @{ }
	[array]$Global:Allnodes = @()
	[string]$Global:AppvFile = ''
	#$global:FF = @{ }
	#endregion
#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Show-ChildForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
SgMAAB+LCAAAAAAABABlk0mLq1oURueB/IfiTgPXLokKeQV6jsbeJPaZaexOYt9F/fW3qi4PHrw9
2uzFN9ms73RLHvWUdAsMh/Dja+lRXf3zi/pN/Prcbj4+TmaHMlSFhYiKxAjL5BPkqIjFuit/N316
wv7Hf1Lf/LMZCevsHWcuyzgOmBBwf4fnoPEiiKlcOScfmYq22WAaMnfJYuPa6rdGdka8sUjkqJ7/
2p/XXJ3m+tD3B5/dbnb5AcgtrqmdbV0ya4ngczLD3UXCRm3H9y8iu03UDJH7HhBaCT0UrwEgqurZ
Dw5mg7iMlbthty+6ieF2Y7Sc4VLycrzY6ryIuVYuY2DJ+XColXxZV+/Cv2DvhlRgPmaFlvK+eBM8
m0KVp8zwLvTZu0sZl9kHR227GYRZt1zFNB6R7QhlV9gQD/iHodF+mNGR6KRZPiyNWspcV9VCv3qw
XoDEApqlQUlaVJs5IYTQqslwu3EkcDVGGXMSPoH5ip7DfMavlO0thyYzJWkgxAUtulFVVuHcjPu/
/wbrVcatZ608dNIY2Q5eGW+7UTxncAqs31Op/tgvOxet7BqTPtNM6cWxYkUnets3uiJdn7HuSXo9
HR4kdBlwtqtYxkvQOPvZDZiEGrebSblUI5rM3GjHt8pHZ7SWmmX7aim5berTQMW6BBGCaJnVFDlX
18iP12V+p8+hLc9wVg4V4A5NK1B4tt0ceUpjRzYq06KXRfsudY8YLE9RZXhU9v0A4+CYU0FjDOvL
FixSgHyx+GR9kwo0+C3mYdK+YuW73pTclyFwFHL0pgJ415mLJVPBW8GPUWGz5XjRdjpNS9S5O0Qu
VRN7mvT1mA5xDSswJRVDrwW3WamcLADfvp6wH5V/pOb6PimjAiX9B/Z1OWH/7c7nH5I8autKAwAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyRead()
	$formChildForm = New-Object 'System.Windows.Forms.Form'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formChildForm_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formChildForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$formChildForm.remove_Load($formChildForm_Load)
			$formChildForm.remove_Load($Form_StateCorrection_Load)
			$formChildForm.remove_Closing($Form_StoreValues_Closing)
			$formChildForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formChildForm.SuspendLayout()
	#
	# formChildForm
	#
	$formChildForm.Controls.Add($buttonOK)
	$formChildForm.Controls.Add($buttonCancel)
	$formChildForm.AutoScaleDimensions = '6, 13'
	$formChildForm.AutoScaleMode = 'Font'
	$formChildForm.ClientSize = '284, 262'
	$formChildForm.Margin = '4, 4, 4, 4'
	$formChildForm.Name = 'formChildForm'
	$formChildForm.StartPosition = 'CenterParent'
	$formChildForm.Text = 'Child Form'
	$formChildForm.add_Load($formChildForm_Load)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '116, 227'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '197, 227'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	$formChildForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formChildForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formChildForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formChildForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formChildForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formChildForm.ShowDialog()

}
#endregion Source: ChildForm.psf

#Start the application
Main ($CommandLine)
