#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 36c03612-8189-46ec-90ad-4898319206e9
# Source File: c:\SAPIEN\PowerShell Studio\Projects\HnMatch_AppvConnectionGroups\HnMatch_AppvConnectionGroups.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.154
     Generated on:       18.03.2019 15:02
     Generated by:       admin
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
	
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	$Global:Exitcode = 0
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	
	#if ([bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544"))
	#{
		
		
		[string]$Global:wkApp = Get-ScriptDirectory
		
		If ((Show-MainForm_psf) -eq 'OK')
		{
		}
#	}
#	else
#	{
#		
#		Msg-User -MsgHead "Admin rights needed !" -Msg "You have to start the program as an Administrator" -Action "OK"
#		Stop-Process -Name 'HnAppvTool'
#	}
	#	}
	Write-Host 'ExitCode:'$Global:Exitcode
	$script:ExitCode = $Global:Exitcode #Set the exit code for the Packager
}

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$Bbr_Appvfiles = New-Object 'System.Windows.Forms.Button'
	$Tbx_AppvFiles = New-Object 'System.Windows.Forms.TextBox'
	$Btn_Font = New-Object 'System.Windows.Forms.Button'
	$Btn_BackColor = New-Object 'System.Windows.Forms.Button'
	$Lbl_Color = New-Object 'System.Windows.Forms.Label'
	$Lbl_ObjectIsolation = New-Object 'System.Windows.Forms.Label'
	$Lbl_BPlugins = New-Object 'System.Windows.Forms.Label'
	$Lbl_ComOptions = New-Object 'System.Windows.Forms.Label'
	$Lbl_Vfs = New-Object 'System.Windows.Forms.Label'
	$Btn_LagTweaktxt = New-Object 'System.Windows.Forms.Button'
	$Grp_RunOnAll = New-Object 'System.Windows.Forms.GroupBox'
	$Chk_ExcludeAllObjectsIsolation = New-Object 'System.Windows.Forms.CheckBox'
	$Chk_EnableFullVFSWriteAc = New-Object 'System.Windows.Forms.CheckBox'
	$Chk_DiableBrowserPlugin = New-Object 'System.Windows.Forms.CheckBox'
	$Grp_ComOptions = New-Object 'System.Windows.Forms.GroupBox'
	$Grp_InteGratedComSettings = New-Object 'System.Windows.Forms.GroupBox'
	$Chk_OutOfProcessComObjec = New-Object 'System.Windows.Forms.CheckBox'
	$Chk_ComInProcess = New-Object 'System.Windows.Forms.CheckBox'
	$Rbu_Isolated = New-Object 'System.Windows.Forms.RadioButton'
	$Rbu_Integrated = New-Object 'System.Windows.Forms.RadioButton'
	$Rbu_ComOFF = New-Object 'System.Windows.Forms.RadioButton'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$buttonExitConsoleToo = New-Object 'System.Windows.Forms.Button'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$Fbm_AppvFolder = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$openfiledialog2 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$columnheader1 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader2 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader3 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader4 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader5 = New-Object 'System.Windows.Forms.ColumnHeader'
	$colordialog1 = New-Object 'System.Windows.Forms.ColorDialog'
	$fontdialog1 = New-Object 'System.Windows.Forms.FontDialog'
	$openfiledialog3 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load= {
		#TODO: Initialize Form Controls here
		$Global:TweakLine = @()
		$Lbl_BPlugins.Text = 'Enabled'
		$Lbl_ComOptions.Text = 'Isolated'
		$Lbl_ObjectIsolation.Text = ''
		$Lbl_Vfs.Text = 'false'
		Write-Host $global:wkApp
		
		$ThisApp = $global:wkApp + '\HnMatch_AppvConnectionGroups.exe' 
		$MainForm.Text += '   Fileversion:' + [System.Diagnostics.FileVersionInfo]::GetVersionInfo($ThisApp).FileVersion
		$listview1.Items.Clear()
		
		$subItem = @($Lbl_Vfs.Text; $Lbl_ComOptions.Text; $Lbl_BPlugins.Text; $Lbl_ObjectIsolation.Text)
		$Item = "Your Choices:"
		Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem
		Frm_VisChoise
	}
	
	$buttonCallChildForm_Click={
		#TODO: Place custom script here
		if((Show-ChildForm_psf) -eq 'OK')
		{
			
		}
	}
	
	
	
	
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	#endregion
	
	
	
	
	Function Frm_FindSettings {
		Write-Host 'Starter Frm_Findsettings'
		#$Li = $listView1.ite
		$mSvar = ""
		$listview1.BeginUpdate()
		$listview1.Items.Clear()
		
		$subItem = @($Lbl_Vfs.Text; $Lbl_ComOptions.Text; $Lbl_BPlugins.Text; $Lbl_ObjectIsolation.Text)
		$Item = "Your Choices:"
		Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem
		#	return "*"
		
		If ($listbox1.Items.Count -gt 0) {
			Write-Host "Frm_Findsettings:Går gjennom lista"
			For ($i = 0; $i -lt $listbox1.Items.Count; $i++) {
				Get-XmlFromAppV -folder $Tbx_AppvFiles.Text -AppvPakke $listbox1.Items[$i]
				Write-Host $listbox1.Items[$i]
				$global:appvfile = $Tbx_AppvFiles.Text + "\AppxManifest.xml"
				[xml]$global:xml = Get-Content -Path $global:appvfile
				$subItem = @(''.'', '', '', '')
				
				$Item = [string]$listbox1.Items[$i]
				$subItem[0] = 'false'
				If ($global:xml.Package.Properties.FullVFSWriteMode -eq $true) { $subItem[0] = 'true' }
				
				$a = $global:xml.Package.ExtensionsConfiguration.COM.Mode
				Write-Host 'A:' $a
				
				Switch ($a) {
					'Off' { $subItem[1] = "ComOff" }
					'Integrated' { $subItem[1] += "Integrated" }
					Default { $subItem[1]= "Isolated" }
				}
				If ($a -eq 'integrated') {
					$mSvar = 'Integrated:'
					$b = 'IP,'
					If ($global:xml.Package.ExtensionsConfiguration.COM.IntegratedCOMAttributes.InProcessEnabled -eq 'false') { $b = '' }
					$c = 'OOP'
					If ($global:xml.Package.ExtensionsConfiguration.COM.IntegratedCOMAttributes.OutOfProcessEnabled -eq 'false') { $c = '' }
					$mSvar += $b + $c
					$subItem[1]= $mSvar
				}
				$a = $global:xml.Package.Extensions.Extension.BrowserPlugin.subcategory.count
				$b = "Disabled"
				If ($a -gt 0) { $b = "Enabled" }
				$subItem[2] = $b
				$subItem[3] = [String]$global:xml.Package.Extensions.Extension.objects.notisolate.Object.name
				
				#Write-Host $subItem
				Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem
			}
			$a = @()
			ForEach ($item In $listview1.Items) {
				$item.Checked = $true
				$a += $item.SubItems[0].text + '|' + $item.SubItems[1].text + '|' + $item.SubItems[2].text + '|' + $item.SubItems[3].text + '|' + $item.SubItems[4].text
			}
			$Filename = $Tbx_AppvFiles.Text + '\prop_' + (get-Date).ToShortDateString().Replace('.', '') + '_' + (Get-date).ToLongTimeString().Replace(':', '') + '.txt'
			Write-Host $Filename
			$a | Out-File -FilePath $filename -Encoding unicode
			Frm_VisChoise
			$listview1.EndUpdate()
			
			$a = @()
			#		ForEach ($item In $listview1.Items) {
			#			$a += $item.SubItems[0]+";" + $item.SubItems[1] + ";" + $item.SubItems[2] + ";" + $item.SubItems[3] + ";"
			#			$item.Checked = $true
			#		}
			#		$a| Out-File -FilePath ($Tbf_AppvFiles.Text +"\out.txt") -Encoding unicode
		}
	}
	
	
	
	
	
	$buttonExitConsoleToo_Click = {
		Stop-Process -Name 'HnMatch_AppvConnectionGroups'
	}
	
	
	
	Function Frm_ComCheck {
		$Grp_InteGratedComSettings.Visible = $false
		If ($Rbu_ComOFF.Checked) {
			$a = "0|6|23|24|25"
			$Lbl_ComOptions.Text = 'ComOff'
		}
		If ($Rbu_Integrated.Checked) {
			$a = "0|6|23|24|31|32"
			$Lbl_ComOptions.Text = 'Integrated:'
			If ($Chk_ComInProcess.Checked) {
				$a += "|33"
				$Lbl_ComOptions.Text +='IP,'
			} Else {
				$a += "|34"
			}
			If ($Chk_OutOfProcessComObjec.Checked) {
				$a += "|35"
				$Lbl_ComOptions.Text += 'OOP'
			} Else { $a += "|36" }
			$Grp_InteGratedComSettings.Visible = $true
		}
		If ($Rbu_Isolated.Checked) {
			$a = "0|6"
			$Lbl_ComOptions.Text = 'Isolated'
			}
		$Global:TweakLine = $a.split('|')
		
	}
	
	$Rbu_ComOFF_CheckedChanged = {
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	
	$Rbu_Isolated_CheckedChanged={
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
		
	}
	
	$Rbu_Integrated_CheckedChanged={
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	$Chk_ComInProcess_CheckedChanged={
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	$Chk_OutOfProcessComObjec_CheckedChanged = {
		#TODO: Place custom script here
		Frm_ComCheck
		Frm_VisChoise
	}
	
	$Btn_LagTweaktxt_Click = {
		$MainForm.Enabled=$false
		Frm_ComCheck
		Frm_VisChoise
		#TODO: Place custom script here
		$com = $global:wkApp + '\Tweakmal.txt'
		$tweakFile = $Tbx_AppvFiles.Text + '\Tweakappv.txt'
		$a = Get-Content -Path $com
		$c = @()
		#Write-Host $global:TweakLine
		$global:TweakLine | ForEach-Object{
			
			$c += $a[$_]
		}
		#$c | ForEach-Object{ Write-Host $_ }
		Out-File -FilePath $tweakFile -InputObject $c -Encoding unicode
		$a = $global:wkApp + '\Tweakappv.exe'
		$arg1 = '/batchfileupdate'
		Write-Host ''
		Write-Host '-- Com-options ----------------------------------------------'
		ForEach ($item In $listview1.Items) {
			If ($item.Checked) {
				If ($item.SubItems[2].Text -ne $Lbl_ComOptions.Text) {
					Write-Host $item.Text':' $item.SubItems[2].Text $Lbl_ComOptions.Text
					$arg2 = $Tbx_AppvFiles.Text + '\' + $item.Text
					$q = & $a $arg1 $arg2 $tweakFile
					
					Wait-Process -Name "TweakAppv.exe*32"
					#$q | ForEach-Object { Write-Host $_ }
				}
			}
			#		ForEach ($i In $item.SubItems) {
			#			Write-Host $i.Text
			#		}
		}
		Write-Host ''
		Write-Host '-- Excludeobjects---------------------------------------------'
		
		$arg1 = '/update'
		$arg5 = $global:wkApp + '\ExcludeAllObjectsFromIsolation_Delete.xsl'
		$arg6 = $global:wkApp + '\ExcludeAllObjectsFromIsolation_Delete.xsl'
		If ($Chk_ExcludeAllObjectsIsolation.Checked) {
			$arg5 = $global:wkApp + '\ExcludeAllObjectsFromIsolation.xsl'
		}
		ForEach ($item In $listview1.Items) {
			If ($item.Checked) {
				If ($item.SubItems[4].Text -ne $Lbl_ObjectIsolation.Text) {
					Write-Host $item.Text':' $item.SubItems[4].Text   $Lbl_ObjectIsolation.Text
					$arg2 = $Tbx_AppvFiles.Text + '\' + $item.Text
					$arg3 = "/TransformManifest"
					$arg4 = "AppxManifest.xml"
					$q = & $a $arg1 $arg2 $arg3 $arg4 $arg6
					Wait-Process -Name "TweakAppv.exe*32"
					$q = & $a $arg1 $arg2 $arg3 $arg4 $arg5
					Wait-Process -Name "TweakAppv.exe*32"
				}
			}
		}
		Write-Host ''
		Write-Host '-- Browser-Plugin----------------------------------------------'
		$arg1 = '/update'
		$arg5 = $global:wkApp + '\BrowserPlugin_Disable.xsl'
		If ($Chk_DiableBrowserPlugin.Checked) {
			ForEach ($item In $listview1.Items) {
				If ($item.Checked) {
					If ($item.SubItems[3].Text -ne $Lbl_BPlugins.Text) {
						Write-Host $item.Text':' $item.SubItems[3].Text   $Lbl_BPlugins.Text
						$arg2 = $Tbx_AppvFiles.Text + '\' + $item.Text
						$arg3 = "/TransformManifest"
						$arg4 = "AppxManifest.xml"
						$q = & $a $arg1 $arg2 $arg3 $arg4 $arg5
						Wait-Process -Name "TweakAppv.exe*32"
					}
				}
			}
		}
		
		Write-Host ''
		Write-Host '-- VFS----------------------------------------------'
		$arg1 = '/update'
		$arg5 = $global:wkApp + '\VFS.xsl'
		$arg6 = 'false'
		
		If ($Chk_EnableFullVFSWriteAc.Checked) { $arg6 = 'true' }
		ForEach ($item In $listview1.Items) {
			If ($item.Checked) {
				If ($item.SubItems[1].Text -ne $Lbl_Vfs.Text) {
					Write-Host $item.Text':' $item.SubItems[1].Text $Lbl_Vfs.Text
					$arg2 = $Tbx_AppvFiles.Text + '\' + $item.Text
					$arg3 = "/TransformManifest"
					$arg4 = "AppxManifest.xml"
					$q = & $a $arg1 $arg2 $arg3 $arg4 $arg5 "-VFS" $arg6
					Write-Host $a $arg1 $arg2 $arg3 $arg4 $arg5 "-VFS" $arg6
					Wait-Process -Name "TweakAppv.exe*32"
				}
			}
			
		}
		
		Write-Host ''
		Write-Host 'Starting too update list----------------------------------------------------------------------'
		Frm_FindSettings
		Write-Host 'Done'
		$MainForm.Enabled = $true
	}
	
	
	Function Frm_VisChoise {
		Param (
			[array]$BColor = @($Lbl_Color.BackColor; $Lbl_Color1.ForeColor; $Lbl_Color1.BackColor; $Lbl_Color.ForeColor),
			[array]$FColor = @($Lbl_Color.ForeColor; $Lbl_Color1.BackColor; $Lbl_Color1.ForeColor; $Lbl_Color.BackColor)
		)
		$listView1.Items[0].Selected = $true	
		$Li = $listView1.Items[0]
	#	$subItem = @($Lbl_Vfs.Text; $Lbl_ComOptions.Text; $Lbl_BPlugins.Text; $Lbl_ObjectIsolation.Text)
	#	$Item = "Your Choices:"
		$Li.SubItems[1].Text = $Lbl_Vfs.Text
		$Li.SubItems[2].Text = $Lbl_ComOptions.Text
		$Li.SubItems[3].Text = $Lbl_BPlugins.Text
		$Li.SubItems[4].Text = $Lbl_ObjectIsolation.Text
		$Li.Checked=$false
	#	$Li.SubItems[1].ForeColor = $Fcolor[0]
	#	$Li.SubItems[1].BackColor = $BColor[0]
	#	$Li.SubItems[2].ForeColor = $Fcolor[1]
	#	$Li.SubItems[2].BackColor = $BColor[1]
	#	$Li.SubItems[3].ForeColor = $Fcolor[2]
	#	$Li.SubItems[3].BackColor = $BColor[2]
	#	
	#	$Li.SubItems[4].ForeColor = $Fcolor[3]
	#	$Li.SubItems[4].BackColor = $BColor[3]
		
		$Li.BackColor = $bcolor[0]
		$Li.ForeColor = $fColor[0]
		$Li.Font = $Lbl_Color.Font
		$listview1.BeginUpdate()
		$ListView1.AutoResizeColumns(1) # base width on content length
		$listview1.EndUpdate()
	}
	
	
	
	$Chk_DiableBrowserPlugin_CheckedChanged={
		#TODO: Place custom script here
		$Lbl_BPlugins.Text = 'Enabled'
		If ($Chk_DiableBrowserPlugin.Checked) { $Lbl_BPlugins.Text = 'Disabled' }
	  Frm_VisChoise
	#	Add-ListViewItem -Items $item -ListView $listview1 -SubItems $SubItem	
	}
	
	$Chk_EnableFullVFSWriteAc_CheckedChanged={
		#TODO: Place custom script here
		$Lbl_Vfs.text = 'false'
		if ($Chk_EnableFullVFSWriteAc.Checked){$Lbl_Vfs.text = 'true'}
		Frm_VisChoise
	}
	
	$Chk_ExcludeAllObjectsIsolation_CheckedChanged= {
		#TODO: Place custom script here
		$Lbl_ObjectIsolation.Text = ""
		If ($Chk_ExcludeAllObjectsIsolation.Checked) { $Lbl_ObjectIsolation.Text = '*' }
		Frm_VisChoise
	}
	
	$Btn_BackColor_Click={
		#TODO: Place custom script here
		$colordialog1.Color = $Lbl_Color.BackColor
		If ($colordialog1.ShowDialog() -eq 'OK') {
			$Lbl_Color.BackColor = $colordialog1.Color
		}
	}
	
	$Btn_Font_Click={
		#TODO: Place custom script here
		$fontdialog1.ShowColor = $true
		$fontdialog1.ShowEffects = $true
		$fontdialog1.Font = $Lbl_Color.Font
		$fontdialog1.Color = $Lbl_Color.ForeColor
		If ($fontdialog1.ShowDialog() -eq 'OK') {
			$Lbl_Color.Font = $fontdialog1.Font
			$Lbl_Color.ForeColor = $fontdialog1.Color
			Frm_VisChoise
		}
		
	}
	
	$Btn_ForeColor_Click = {
		$colordialog1.Color = $Lbl_Color.ForeColor
		If ($colordialog1.ShowDialog() -eq 'OK') {
			$Lbl_Color.ForeColor = $colordialog1.Color
			Frm_VisChoise
		}
	}
	
	$Bbr_Appvfiles_Click2= {
		If ($openfiledialog3.ShowDialog() -eq 'OK') {
			$MainForm.Enabled = $false
			$Tbx_AppvFiles.Text = $openfiledialog3.FileName
			$appvfiles = @()
			$b = $Tbx_AppvFiles.Text.Split('\')
			If ($b[$b.Count - 1].EndsWith('.appv')) {
				$c = $Tbx_AppvFiles.Text.Substring(0, $Tbx_AppvFiles.Text.Length - ($b[$b.Count - 1].Length) - 1)
				$Tbx_AppvFiles.Text = $c
				$a = Get-ChildItem -path $c -Filter "*.appv"
				If ($a -ne $null) { $appvFiles += $a }
				Update-ListBox -ListBox $listbox1 -Items $appvFiles
				Frm_FindSettings
				$MainForm.Enabled = $true
			}
		}
	}
	$openfiledialog3_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_Tbx_AppvFiles = $Tbx_AppvFiles.Text
		$script:MainForm_Chk_ExcludeAllObjectsIsolation = $Chk_ExcludeAllObjectsIsolation.Checked
		$script:MainForm_Chk_EnableFullVFSWriteAc = $Chk_EnableFullVFSWriteAc.Checked
		$script:MainForm_Chk_DiableBrowserPlugin = $Chk_DiableBrowserPlugin.Checked
		$script:MainForm_Chk_OutOfProcessComObjec = $Chk_OutOfProcessComObjec.Checked
		$script:MainForm_Chk_ComInProcess = $Chk_ComInProcess.Checked
		$script:MainForm_Rbu_Isolated = $Rbu_Isolated.Checked
		$script:MainForm_Rbu_Integrated = $Rbu_Integrated.Checked
		$script:MainForm_Rbu_ComOFF = $Rbu_ComOFF.Checked
		$script:MainForm_listview1 = $listview1.SelectedItems
		$script:MainForm_listview1_Checked = $listview1.CheckedItems
		$script:MainForm_listbox1 = $listbox1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$Bbr_Appvfiles.remove_Click($Bbr_Appvfiles_Click2)
			$Btn_Font.remove_Click($Btn_Font_Click)
			$Btn_BackColor.remove_Click($Btn_BackColor_Click)
			$Btn_LagTweaktxt.remove_Click($Btn_LagTweaktxt_Click)
			$Chk_ExcludeAllObjectsIsolation.remove_CheckedChanged($Chk_ExcludeAllObjectsIsolation_CheckedChanged)
			$Chk_EnableFullVFSWriteAc.remove_CheckedChanged($Chk_EnableFullVFSWriteAc_CheckedChanged)
			$Chk_DiableBrowserPlugin.remove_CheckedChanged($Chk_DiableBrowserPlugin_CheckedChanged)
			$Chk_OutOfProcessComObjec.remove_CheckedChanged($Chk_OutOfProcessComObjec_CheckedChanged)
			$Chk_ComInProcess.remove_CheckedChanged($Chk_ComInProcess_CheckedChanged)
			$Rbu_Isolated.remove_CheckedChanged($Rbu_Isolated_CheckedChanged)
			$Rbu_Integrated.remove_CheckedChanged($Rbu_Integrated_CheckedChanged)
			$Rbu_ComOFF.remove_CheckedChanged($Rbu_ComOFF_CheckedChanged)
			$buttonExitConsoleToo.remove_Click($buttonExitConsoleToo_Click)
			$MainForm.remove_Load($MainForm_Load)
			$openfiledialog3.remove_FileOk($openfiledialog3_FileOk)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$Grp_RunOnAll.SuspendLayout()
	$Grp_ComOptions.SuspendLayout()
	$Grp_InteGratedComSettings.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($Bbr_Appvfiles)
	$MainForm.Controls.Add($Tbx_AppvFiles)
	$MainForm.Controls.Add($Btn_Font)
	$MainForm.Controls.Add($Btn_BackColor)
	$MainForm.Controls.Add($Lbl_Color)
	$MainForm.Controls.Add($Lbl_ObjectIsolation)
	$MainForm.Controls.Add($Lbl_BPlugins)
	$MainForm.Controls.Add($Lbl_ComOptions)
	$MainForm.Controls.Add($Lbl_Vfs)
	$MainForm.Controls.Add($Btn_LagTweaktxt)
	$MainForm.Controls.Add($Grp_RunOnAll)
	$MainForm.Controls.Add($listview1)
	$MainForm.Controls.Add($buttonExitConsoleToo)
	$MainForm.Controls.Add($listbox1)
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.AutoScroll = $True
	$MainForm.AutoScrollMinSize = '940, 300'
	$MainForm.ClientSize = '946, 452'
	$MainForm.Location = '600, 50'
	$MainForm.Margin = '4, 4, 4, 4'
	$MainForm.MinimumSize = '962, 491'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'Manual'
	$MainForm.Text = 'Update ConnectionGroup Com-settings'
	$MainForm.add_Load($MainForm_Load)
	#
	# Bbr_Appvfiles
	#
	$Bbr_Appvfiles.Location = '19, 15'
	$Bbr_Appvfiles.Name = 'Bbr_Appvfiles'
	$Bbr_Appvfiles.Size = '30, 23'
	$Bbr_Appvfiles.TabIndex = 1
	$Bbr_Appvfiles.Text = '...'
	$Bbr_Appvfiles.UseCompatibleTextRendering = $True
	$Bbr_Appvfiles.UseVisualStyleBackColor = $True
	$Bbr_Appvfiles.add_Click($Bbr_Appvfiles_Click2)
	#
	# Tbx_AppvFiles
	#
	$Tbx_AppvFiles.AutoCompleteMode = 'SuggestAppend'
	$Tbx_AppvFiles.AutoCompleteSource = 'FileSystem'
	$Tbx_AppvFiles.Enabled = $False
	$Tbx_AppvFiles.Location = '55, 18'
	$Tbx_AppvFiles.Name = 'Tbx_AppvFiles'
	$Tbx_AppvFiles.Size = '414, 20'
	$Tbx_AppvFiles.TabIndex = 0
	#
	# Btn_Font
	#
	$Btn_Font.Anchor = 'Top, Right'
	$Btn_Font.Location = '715, 15'
	$Btn_Font.Name = 'Btn_Font'
	$Btn_Font.Size = '109, 23'
	$Btn_Font.TabIndex = 19
	$Btn_Font.Text = 'Font , ForeColor'
	$Btn_Font.UseCompatibleTextRendering = $True
	$Btn_Font.UseVisualStyleBackColor = $True
	$Btn_Font.add_Click($Btn_Font_Click)
	#
	# Btn_BackColor
	#
	$Btn_BackColor.Anchor = 'Top, Right'
	$Btn_BackColor.Location = '830, 15'
	$Btn_BackColor.Name = 'Btn_BackColor'
	$Btn_BackColor.Size = '104, 23'
	$Btn_BackColor.TabIndex = 18
	$Btn_BackColor.Text = 'BackColor'
	$Btn_BackColor.UseCompatibleTextRendering = $True
	$Btn_BackColor.UseVisualStyleBackColor = $True
	$Btn_BackColor.add_Click($Btn_BackColor_Click)
	#
	# Lbl_Color
	#
	$Lbl_Color.Anchor = 'Top, Right'
	$Lbl_Color.BackColor = 'Yellow'
	$Lbl_Color.BorderStyle = 'Fixed3D'
	$Lbl_Color.Font = 'Verdana, 9pt'
	$Lbl_Color.ForeColor = 'Maroon'
	$Lbl_Color.ImageAlign = 'BottomCenter'
	$Lbl_Color.Location = '497, 15'
	$Lbl_Color.Name = 'Lbl_Color'
	$Lbl_Color.Size = '212, 23'
	$Lbl_Color.TabIndex = 15
	$Lbl_Color.Text = ' Your choices'
	$Lbl_Color.TextAlign = 'MiddleCenter'
	$Lbl_Color.UseCompatibleTextRendering = $True
	#
	# Lbl_ObjectIsolation
	#
	$Lbl_ObjectIsolation.Anchor = 'Bottom, Left'
	$Lbl_ObjectIsolation.AutoSize = $True
	$Lbl_ObjectIsolation.Font = 'Verdana, 8.25pt'
	$Lbl_ObjectIsolation.Location = '186, 317'
	$Lbl_ObjectIsolation.Name = 'Lbl_ObjectIsolation'
	$Lbl_ObjectIsolation.Size = '90, 18'
	$Lbl_ObjectIsolation.TabIndex = 14
	$Lbl_ObjectIsolation.Text = 'ObjectIsolation'
	$Lbl_ObjectIsolation.UseCompatibleTextRendering = $True
	$Lbl_ObjectIsolation.Visible = $False
	#
	# Lbl_BPlugins
	#
	$Lbl_BPlugins.Anchor = 'Bottom, Left'
	$Lbl_BPlugins.AutoSize = $True
	$Lbl_BPlugins.Font = 'Verdana, 8.25pt'
	$Lbl_BPlugins.Location = '84, 317'
	$Lbl_BPlugins.Name = 'Lbl_BPlugins'
	$Lbl_BPlugins.Size = '52, 18'
	$Lbl_BPlugins.TabIndex = 13
	$Lbl_BPlugins.Text = 'BPlugins'
	$Lbl_BPlugins.UseCompatibleTextRendering = $True
	$Lbl_BPlugins.Visible = $False
	#
	# Lbl_ComOptions
	#
	$Lbl_ComOptions.Anchor = 'Bottom, Left'
	$Lbl_ComOptions.AutoSize = $True
	$Lbl_ComOptions.Font = 'Verdana, 8.25pt'
	$Lbl_ComOptions.Location = '5, 317'
	$Lbl_ComOptions.Name = 'Lbl_ComOptions'
	$Lbl_ComOptions.Size = '73, 18'
	$Lbl_ComOptions.TabIndex = 12
	$Lbl_ComOptions.Text = 'ComOptions'
	$Lbl_ComOptions.UseCompatibleTextRendering = $True
	$Lbl_ComOptions.Visible = $False
	#
	# Lbl_Vfs
	#
	$Lbl_Vfs.Anchor = 'Bottom, Left'
	$Lbl_Vfs.AutoSize = $True
	$Lbl_Vfs.Font = 'Verdana, 8.25pt'
	$Lbl_Vfs.Location = '142, 317'
	$Lbl_Vfs.Name = 'Lbl_Vfs'
	$Lbl_Vfs.Size = '26, 18'
	$Lbl_Vfs.TabIndex = 11
	$Lbl_Vfs.Text = 'VFS'
	$Lbl_Vfs.UseCompatibleTextRendering = $True
	$Lbl_Vfs.Visible = $False
	#
	# Btn_LagTweaktxt
	#
	$Btn_LagTweaktxt.Anchor = 'Bottom, Right'
	$Btn_LagTweaktxt.Font = 'Verdana, 14.25pt, style=Bold'
	$Btn_LagTweaktxt.Location = '689, 348'
	$Btn_LagTweaktxt.Name = 'Btn_LagTweaktxt'
	$Btn_LagTweaktxt.Size = '245, 44'
	$Btn_LagTweaktxt.TabIndex = 10
	$Btn_LagTweaktxt.Text = 'Compile'
	$Btn_LagTweaktxt.UseCompatibleTextRendering = $True
	$Btn_LagTweaktxt.UseVisualStyleBackColor = $True
	$Btn_LagTweaktxt.add_Click($Btn_LagTweaktxt_Click)
	#
	# Grp_RunOnAll
	#
	$Grp_RunOnAll.Controls.Add($Chk_ExcludeAllObjectsIsolation)
	$Grp_RunOnAll.Controls.Add($Chk_EnableFullVFSWriteAc)
	$Grp_RunOnAll.Controls.Add($Chk_DiableBrowserPlugin)
	$Grp_RunOnAll.Controls.Add($Grp_ComOptions)
	$Grp_RunOnAll.Anchor = 'Bottom, Left'
	$Grp_RunOnAll.Location = '9, 338'
	$Grp_RunOnAll.Name = 'Grp_RunOnAll'
	$Grp_RunOnAll.Size = '545, 106'
	$Grp_RunOnAll.TabIndex = 9
	$Grp_RunOnAll.TabStop = $False
	$Grp_RunOnAll.UseCompatibleTextRendering = $True
	#
	# Chk_ExcludeAllObjectsIsolation
	#
	$Chk_ExcludeAllObjectsIsolation.Location = '308, 70'
	$Chk_ExcludeAllObjectsIsolation.Name = 'Chk_ExcludeAllObjectsIsolation'
	$Chk_ExcludeAllObjectsIsolation.Size = '186, 16'
	$Chk_ExcludeAllObjectsIsolation.TabIndex = 3
	$Chk_ExcludeAllObjectsIsolation.Text = 'Exclude all object from isolation'
	$Chk_ExcludeAllObjectsIsolation.UseCompatibleTextRendering = $True
	$Chk_ExcludeAllObjectsIsolation.UseVisualStyleBackColor = $True
	$Chk_ExcludeAllObjectsIsolation.add_CheckedChanged($Chk_ExcludeAllObjectsIsolation_CheckedChanged)
	#
	# Chk_EnableFullVFSWriteAc
	#
	$Chk_EnableFullVFSWriteAc.Location = '308, 54'
	$Chk_EnableFullVFSWriteAc.Name = 'Chk_EnableFullVFSWriteAc'
	$Chk_EnableFullVFSWriteAc.Size = '186, 16'
	$Chk_EnableFullVFSWriteAc.TabIndex = 2
	$Chk_EnableFullVFSWriteAc.Text = 'Enable Full VFS write access'
	$Chk_EnableFullVFSWriteAc.UseCompatibleTextRendering = $True
	$Chk_EnableFullVFSWriteAc.UseVisualStyleBackColor = $True
	$Chk_EnableFullVFSWriteAc.add_CheckedChanged($Chk_EnableFullVFSWriteAc_CheckedChanged)
	#
	# Chk_DiableBrowserPlugin
	#
	$Chk_DiableBrowserPlugin.Location = '308, 38'
	$Chk_DiableBrowserPlugin.Name = 'Chk_DiableBrowserPlugin'
	$Chk_DiableBrowserPlugin.Size = '237, 16'
	$Chk_DiableBrowserPlugin.TabIndex = 1
	$Chk_DiableBrowserPlugin.Text = 'Disable Browser Plugin (can not enable)'
	$Chk_DiableBrowserPlugin.UseCompatibleTextRendering = $True
	$Chk_DiableBrowserPlugin.UseVisualStyleBackColor = $True
	$Chk_DiableBrowserPlugin.add_CheckedChanged($Chk_DiableBrowserPlugin_CheckedChanged)
	#
	# Grp_ComOptions
	#
	$Grp_ComOptions.Controls.Add($Grp_InteGratedComSettings)
	$Grp_ComOptions.Controls.Add($Rbu_Isolated)
	$Grp_ComOptions.Controls.Add($Rbu_Integrated)
	$Grp_ComOptions.Controls.Add($Rbu_ComOFF)
	$Grp_ComOptions.Location = '8, 19'
	$Grp_ComOptions.Name = 'Grp_ComOptions'
	$Grp_ComOptions.Size = '274, 77'
	$Grp_ComOptions.TabIndex = 0
	$Grp_ComOptions.TabStop = $False
	$Grp_ComOptions.Text = 'COM-Options'
	$Grp_ComOptions.UseCompatibleTextRendering = $True
	#
	# Grp_InteGratedComSettings
	#
	$Grp_InteGratedComSettings.Controls.Add($Chk_OutOfProcessComObjec)
	$Grp_InteGratedComSettings.Controls.Add($Chk_ComInProcess)
	$Grp_InteGratedComSettings.Location = '84, 15'
	$Grp_InteGratedComSettings.Name = 'Grp_InteGratedComSettings'
	$Grp_InteGratedComSettings.Size = '184, 56'
	$Grp_InteGratedComSettings.TabIndex = 3
	$Grp_InteGratedComSettings.TabStop = $False
	$Grp_InteGratedComSettings.Text = 'Integrated ComSettings'
	$Grp_InteGratedComSettings.UseCompatibleTextRendering = $True
	$Grp_InteGratedComSettings.Visible = $False
	#
	# Chk_OutOfProcessComObjec
	#
	$Chk_OutOfProcessComObjec.Location = '10, 36'
	$Chk_OutOfProcessComObjec.Name = 'Chk_OutOfProcessComObjec'
	$Chk_OutOfProcessComObjec.Size = '165, 16'
	$Chk_OutOfProcessComObjec.TabIndex = 1
	$Chk_OutOfProcessComObjec.Text = 'OutOfProcess ComObjects'
	$Chk_OutOfProcessComObjec.UseCompatibleTextRendering = $True
	$Chk_OutOfProcessComObjec.UseVisualStyleBackColor = $True
	$Chk_OutOfProcessComObjec.add_CheckedChanged($Chk_OutOfProcessComObjec_CheckedChanged)
	#
	# Chk_ComInProcess
	#
	$Chk_ComInProcess.Location = '10, 20'
	$Chk_ComInProcess.Name = 'Chk_ComInProcess'
	$Chk_ComInProcess.Size = '159, 16'
	$Chk_ComInProcess.TabIndex = 0
	$Chk_ComInProcess.Text = 'In Process Com Objects'
	$Chk_ComInProcess.UseCompatibleTextRendering = $True
	$Chk_ComInProcess.UseVisualStyleBackColor = $True
	$Chk_ComInProcess.add_CheckedChanged($Chk_ComInProcess_CheckedChanged)
	#
	# Rbu_Isolated
	#
	$Rbu_Isolated.Checked = $True
	$Rbu_Isolated.Location = '6, 51'
	$Rbu_Isolated.Name = 'Rbu_Isolated'
	$Rbu_Isolated.Size = '80, 16'
	$Rbu_Isolated.TabIndex = 2
	$Rbu_Isolated.TabStop = $True
	$Rbu_Isolated.Text = 'Isolated'
	$Rbu_Isolated.UseCompatibleTextRendering = $True
	$Rbu_Isolated.UseVisualStyleBackColor = $True
	$Rbu_Isolated.add_CheckedChanged($Rbu_Isolated_CheckedChanged)
	#
	# Rbu_Integrated
	#
	$Rbu_Integrated.Location = '6, 35'
	$Rbu_Integrated.Name = 'Rbu_Integrated'
	$Rbu_Integrated.Size = '80, 16'
	$Rbu_Integrated.TabIndex = 1
	$Rbu_Integrated.Text = 'Integrated'
	$Rbu_Integrated.UseCompatibleTextRendering = $True
	$Rbu_Integrated.UseVisualStyleBackColor = $True
	$Rbu_Integrated.add_CheckedChanged($Rbu_Integrated_CheckedChanged)
	#
	# Rbu_ComOFF
	#
	$Rbu_ComOFF.Location = '6, 19'
	$Rbu_ComOFF.Name = 'Rbu_ComOFF'
	$Rbu_ComOFF.Size = '80, 16'
	$Rbu_ComOFF.TabIndex = 0
	$Rbu_ComOFF.Text = 'ComOFF'
	$Rbu_ComOFF.UseCompatibleTextRendering = $True
	$Rbu_ComOFF.UseVisualStyleBackColor = $True
	$Rbu_ComOFF.add_CheckedChanged($Rbu_ComOFF_CheckedChanged)
	#
	# listview1
	#
	$listview1.Anchor = 'Top, Bottom, Left, Right'
	$listview1.AutoArrange = $False
	$listview1.BackgroundImageTiled = $True
	$listview1.CheckBoxes = $True
	[void]$listview1.Columns.Add($columnheader1)
	[void]$listview1.Columns.Add($columnheader2)
	[void]$listview1.Columns.Add($columnheader3)
	[void]$listview1.Columns.Add($columnheader4)
	[void]$listview1.Columns.Add($columnheader5)
	$listview1.Font = 'Verdana, 9pt'
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '19, 43'
	$listview1.Margin = '1, 1, 1, 1'
	$listview1.MinimumSize = '800, 264'
	$listview1.Name = 'listview1'
	$listview1.ShowGroups = $False
	$listview1.Size = '915, 264'
	$listview1.TabIndex = 8
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	#
	# buttonExitConsoleToo
	#
	$buttonExitConsoleToo.Anchor = 'Bottom, Right'
	$buttonExitConsoleToo.Font = 'Verdana, 14.25pt, style=Bold'
	$buttonExitConsoleToo.Location = '689, 398'
	$buttonExitConsoleToo.Name = 'buttonExitConsoleToo'
	$buttonExitConsoleToo.Size = '245, 43'
	$buttonExitConsoleToo.TabIndex = 7
	$buttonExitConsoleToo.Text = 'Exit (Console too)'
	$buttonExitConsoleToo.UseCompatibleTextRendering = $True
	$buttonExitConsoleToo.UseVisualStyleBackColor = $True
	$buttonExitConsoleToo.add_Click($buttonExitConsoleToo_Click)
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '5, 43'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '10, 264'
	$listbox1.TabIndex = 5
	$listbox1.Visible = $False
	#
	# Fbm_AppvFolder
	#
	$Fbm_AppvFolder.InitialDirectory = 'C:\Temp\calc'
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = 'txt'
	$openfiledialog1.Filter = 'Appv files (.appv)|*.appv'
	$openfiledialog1.ShowHelp = $True
	#
	# openfiledialog2
	#
	$openfiledialog2.DefaultExt = 'txt'
	$openfiledialog2.Filter = 'Text File (.txt)|*.txt|All Files|*.*'
	$openfiledialog2.ShowHelp = $True
	#
	# columnheader1
	#
	$columnheader1.Text = 'AppvPackage'
	$columnheader1.Width = 165
	#
	# columnheader2
	#
	$columnheader2.Text = 'VFS'
	$columnheader2.Width = 50
	#
	# columnheader3
	#
	$columnheader3.Text = 'Com-Options'
	$columnheader3.Width = 120
	#
	# columnheader4
	#
	$columnheader4.Text = 'B.Plugins'
	$columnheader4.Width = 65
	#
	# columnheader5
	#
	$columnheader5.Text = 'Object names excluded from Isolation (*=ALL)'
	$columnheader5.Width = 4000
	#
	# colordialog1
	#
	#
	# fontdialog1
	#
	#
	# openfiledialog3
	#
	$openfiledialog3.DefaultExt = 'appv'
	$openfiledialog3.Filter = 'Appv(.Appv)|*.Appv'
	$openfiledialog3.ShowHelp = $True
	$openfiledialog3.Title = 'Choose one  .appv file '
	$openfiledialog3.add_FileOk($openfiledialog3_FileOk)
	$Grp_InteGratedComSettings.ResumeLayout()
	$Grp_ComOptions.ResumeLayout()
	$Grp_RunOnAll.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	Function Msg-User {
		Param (
			[String]$MsgHead,
			[Array]$Msg,
			[string]$Action = 'OKCancel'
			#'OK', 'AbortRetryIgnore', 'YesNoCancel', 'YesNo', 'RetryCancel'.''
		)
		For ($i = 0; $i -lt $Msg.count; $i++)
		{
			$msg[$i] += "`r`n "
		}
		
		Return [System.Windows.MessageBox]::Show($msg, $MsgHead, $Action, 'Asterisk')
	}
	
	#region XML
	
	Function Get-XmlFromAppV {
		Param (
			[string]$folder,
			[string]$AppvPakke
		)
		$AppxManifest = $folder + "\AppxManifest.xml"
		If (Test-Path $AppxManifest) { Remove-Item $AppxManifest | Out-Null }
		$arg1 = $folder + "\" + $AppvPakke
		$arg3 = 'AppxManifest.xml'
		$arg4 = '-o"' + $folder + '"'
		$arg5 = '-y'
		$b = $Global:wkApp + "\7-Zip\7z.exe"
		#Write-Host $b 'x' $arg1"|"$arg3"|"$arg4"|" '-bso0' '-bse0' '-aoa' '-bd' '-y'
		&$b 'x' $arg1 $arg3 $arg4 '-bso0' '-bse0' '-aoa' '-bd' '-y'
		Return (Test-Path $AppxManifest)
	}
	
	Function Get-AppxManifestXml {
		Param (
			[string]$xmlfile
		)
		[int]$Global:NsNr = 0
		[array]$Global:NsNames = @()
		[hashtable]$Global:NsNa = @{ }
		[hashtable]$Global:NsNode = @{ }
		[hashtable]$Global:NodeType = @{ }
		[array]$Global:Allnodes = @{ }
		$a = (Les-AppxManifestXml -xmlfile $xmlfile)
		If ($a -eq 'ok') {
			$Global:Allnodes = $Global:Allnodes | sort-Object
			Return $Global:Allnodes
		} Else {
			Return $a
		}
	}
	
	
	Function Get-Endenode {
		Param (
			[string]$NodePath
		)
		#sjekk for nodenavn som inneholder[ .'] og ender med ['] - (Det som er inni [])
		If ($NodePath -match ".'" -and $NodePath.EndsWith("'")) {
			$AttributeName = $NodePath.Split('.')[-2 .. -1] -join { '.' } | ForEach-Object{ $_.replace("'", '') }
		} Else {
			$AttributeName = $NodePath.Split('.')[-1]
		}
		Return $AttributeName
	}
	
	Function Get-NsName {
		$Global:NsNr += 1
		$nsName = 'a' + $Global:NsNr
		$Global:NsNames += $nsName
		Return $nsName
	}
	
	Function Get-XmlElementsAttributeValue {
		Param (
			[string]$NodePath,
			[string]$DeleteAttributes = 'N'
		)
		$c = 1
		If ($NodePath -match ".'" -and $NodePath.EndsWith("'")) {
			$AttributeName = $NodePath.Split('.')[-2 .. -1] -join { '.' } | ForEach-Object{ $_.replace("'", '') }
			$c = 3
		} Else {
			$AttributeName = $NodePath.Split('.')[-1]
		}
		$NodePath = $NodePath.Substring(0, $NodePath.Length - $AttributeName.Length - $c)
		[string]$fullyQualifiedNodePath = Set-FullyQualifiedXmlNodePath -NodePath $NodePath
		$node = $Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns)
		If ($node -and $node.$AttributeName) {
			If ($DeleteAttributes -ne 'N') {
				$node.RemoveAttribute($AttributeName)
				Return $null
			} Else { Return $node.$AttributeName }
		} Else { Return $null }
	}
	
	Function Get-XmlNode {
		Param (
			[string]$NodePath,
			[string]$Childnodes = ''
		)
		[string]$fullyQualifiedNodePath = Set-FullyQualifiedXmlNodePath -NodePath $NodePath
		If ($Childnodes -ne '') {
			$Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns).ChildNodes >$Childnodes
		}
		$node = $Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns)
		Return $node
	}
	
	Function Get-XmlNodesDeskNy {
		Param (
			[string]$NodePath,
			[string]$filch = '',
			[string]$Filenode = ''
		)
		[string]$a = Set-FullyQualifiedXmlNodePath $NodePath
		[string[]]$n = (($Global:Xml.SelectNodes($a, $Global:ns) | Get-Member -MemberType Property | Format-Table -Property name) | out-string -stream) -notmatch '^$' | Select-Object -Skip 2
		[string[]]$d = (($Global:Xml.SelectNodes($a, $Global:ns) | Get-Member -MemberType Property | Format-Table -Property definition) | out-string -stream) -notmatch '^$' | Select-Object -Skip 2
		$tmp2 = '.'
		$Node = Get-XmlNode -NodePath $NodePath -Childnodes $filCn
		If ($NodePath -eq '') { $tmp2 = '' }
		For ($j = 0; $j -lt $n.Count; $j++) {
			$tmp = 'com'
			#Hrite-Host '275 j:'$j           
			If ($n[$j].split('.').count -gt 1) { $n[$j] = "'" + [string]$n[$j].trim() + "'" }
			#if ($d[$j] -like 'system.object*'){$tmp='obj.'}
			If ($d[$j] -like 'system*') { $tmp = 'xml.' }
			If ($n[$j] -like '#commen*') { $tmp = 'com.' }
			If ($d[$j] -like 'string*') { $tmp = 'val.' }
			If ($tmp -eq 'xml.') {
				$p = $NodePath + $tmp2 + [string]$n[$j].Trim()
				$q = $p.Split('.')[-1]
				$nsValue = $node.$q.NamespaceURI
				#Hrite-Host '284'$p'| ns:'$nsValue'-'
				$tmp3 = Set-NsName -NsValue $nsValue -NodePath $p
				$c = Get-XmlNode -NodePath $p
				[string]$b = $c.NodeType
				If ($b -eq 'Element' -or $b -eq 'Document') {
					$tmp = 'xml.'
				} Else {
					$tmp = 'val.'
					#Hrite-Host '296 Nodetype:'$b 'j:'$j
				}
			}
			$n[$j] = $tmp + $NodePath + $tmp2 + [string]$n[$j].Trim()
			$d[$j] = $d[$j] + ' | ' + $n[$j]
		}
		If ($Filenode -ne '') {
			$d | out-file $Filenode
		}
		Return [array]$n
	}
	
	Function Get-XmlValCom {
		Param (
			[array]$Found,
			[String]$Sjk
		)
		[array]$n = @()
		For ($j = 0; $j -lt $Found.Count; $j++) {
			[string]$h = $Found[$j]
			[int]$q = $h.Length
			If ($h.Length -igt 3) {
				#Hrite-Host 'h:'$h' sjk:'$sjk' l:'$q
				If ($h.Substring(0, 4) -eq $sjk) {
					$n += [string]$h.Substring(4, $h.Length - 4)
				}
			}
		}
		Return $n
	}
	Function Les-AppxManifestXml {
		Param (
			[string]$xmlfile
		)
		If (-not (Test-Path $xmlfile)) {
			Return ('Can't find:' + $xmlfile)
		}
		$Forst = 0
		[xml]$Global:Xml = get-content -Path $XmlFile
		[System.Xml.XmlNamespaceManager]$Global:Ns = New-Object System.Xml.XmlNamespaceManager($Global:xml.NameTable)
		$a = Set-NsName -NsValue $Global:Xml.DocumentElement.NamespaceURI -NodePath '/'
		$Global:Allnodes = @()
		$XmlNoder = @()
		$ValNoder = @()
		$ComNoder = @()
		$FoundNodes = @('xml.')
		Do {
			$fil = ''
			[array]$Global:Allnodes += $FoundNodes | ForEach-Object{ If ($_ -ne 'val.xml') { $_ } }
			#$Chknodes = @()
			[array]$Chknodes = Get-XmlValCom -Found $FoundNodes -Sjk 'xml.'
			If ($Forst -lt 3) {
				Write-Host $Forst '<-- nr : Chknodes -->' $Chknodes ' GA:' $Global:Allnodes
			}
			
			If ($Forst -eq 1) {
				Write-Host $global:XmlNode
				$Global:XmlNode = $Chknodes[0]
			}
			
			$Forst += 1
			If ($Chknodes.count -lt 1) { Break }
			[array]$XmlNoder += $Chknodes
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'val.'
			If ($TmpNoder.Count -gt 0) { [array]$ValNoder += $TmpNoder }
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'com.'
			If ($TmpNoder.Count -gt 0) { [array]$ComNoder += $TmpNoder }
			$FoundNodes = @()
			For ($i = 0; $i -lt $Chknodes.Count; $i++) {
				$noden = [string]$Chknodes[$i]
				$Filenode = ''
				$Filch = ''
				$TmpNoder = Get-XmlNodesDeskNy -NodePath $noden -filch $filch -Filenode $Filenode
				$Fil = ''
				$FoundNodes += $TmpNoder
			}
		} Until ($FoundNodes.count -lt 1)
		Return ('ok')
		
		$XmlNodesRap = @()
		$a = $null
		For ($i = 1; $i -lt $Xmlnoder.Count; $i++) {
			[string]$q = $Xmlnoder[$i]
			[string]$fullyQualifiedNodePath = Set-FullyQualifiedXmlNodePath -NodePath $q
			$XmlNodesRap += '--- ' + $q + '----'
			$XmlNodesRap += $Global:xml.SelectSingleNode($fullyQualifiedNodePath, $Global:ns)
		}
		$Fil = $Global:Folders.Root + 'xmlnodesRap.txt'
		$XmlNodesRap >$Fil
		$VerdiNodesRap = @()
		For ($i = 1; $i -lt $ValNoder.Count; $i++) {
			[string]$q = $ValNoder[$i]
			$Res = Get-XmlElementsAttributeValue -NodePath $q
			$Res = $Res | ForEach-Object{ $q + ' : ' + $_ }
			$VerdiNodesRap += $Res
		}
		$Fil = $Global:Folders + 'VerdinodesRap.txt'
		$VerdiNodesRap >$Fil
	}
	
	Function Les-AppxManifestXml {
		Param (
			[string]$xmlfile
		)
		If (-not (Test-Path $xmlfile)) {
			Return ('Can't find:' + $xmlfile)
		}
		$Forst = 0
		[xml]$Global:Xml = get-content -Path $XmlFile
		[System.Xml.XmlNamespaceManager]$Global:Ns = New-Object System.Xml.XmlNamespaceManager($Global:xml.NameTable)
		$a = Set-NsName -NsValue $Global:Xml.DocumentElement.NamespaceURI -NodePath '/'
		$Global:Allnodes = @()
		$XmlNoder = @()
		$ValNoder = @()
		$ComNoder = @()
		$FoundNodes = @('xml.')
		Do {
			$fil = ''
			[array]$Global:Allnodes += $FoundNodes | ForEach-Object{ If ($_ -ne 'val.xml') { $_ } }
			[array]$Chknodes = Get-XmlValCom -Found $FoundNodes -Sjk 'xml.'
			If ($Forst -lt 3) {
				#Write-Host $Forst '<-- nr : Chknodes -->' $Chknodes ' GA:' $Global:Allnodes
			}
			
			If ($Forst -eq 1) { $Global:XmlNode = $Chknodes[0] }
			
			$Forst += 1
			If ($Chknodes.count -lt 1) { Break }
			[array]$XmlNoder += $Chknodes
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'val.'
			If ($TmpNoder.Count -gt 0) { [array]$ValNoder += $TmpNoder }
			[array]$TmpNoder = Get-XmlValCom -Found $FoundNodes -Sjk 'com.'
			If ($TmpNoder.Count -gt 0) { [array]$ComNoder += $TmpNoder }
			$FoundNodes = @()
			For ($i = 0; $i -lt $Chknodes.Count; $i++) {
				$noden = [string]$Chknodes[$i]
				$Filenode = ''
				$Filch = ''
				$TmpNoder = Get-XmlNodesDeskNy -NodePath $noden -filch $filch -Filenode $Filenode
				$Fil = ''
				$FoundNodes += $TmpNoder
			}
		} Until ($FoundNodes.count -lt 1)
		Return ('ok')
	}
	
	Function Set-FullyQualifiedXmlNodePath {
		Param (
			[String]$NodePath
		)
		If ($Nodepath -eq '') { Return '/' }
		[array]$a = $NodePath.Split('.')
		[int]$b = $NodePath.Split('.').count
		[string]$c = ''
		[string]$d = ''
		For ($i = 0; $i -lt $b; $i++) {
			$d += $a[$i]
			$c += '/' + $Global:NsNode.$d + ':' + $a[$i]
		}
		Return $c
	}
	
	Function Set-NodeType {
		Param (
			$Ntype,
			[string]$NodePath
		)
		$nodename = $NodePath
		#Hrite-Host $q ':' $Found[$j]":" $p
		If ($nodename -like ".") {
			$nodename = $nodename | ForEach-Object{ $_.replace('.', '') }
		}
		#Hrite-Host 'Ntype:'$nodename
		$Glabal:NodeType.Add($nodename, $NType)
		Return 'ok'
	}
	
	Function Set-NsName {
		Param (
			[String]$NsValue,
			[String]$NodePath
		)
		
		If ($NsValue.Length -lt 4) {
			$NsValue = $Global:NsNa.[string]$Global:NsNames[0]
			#Hrite-Host '63':$NodePath
		}
		If ($NsValue.Length -gt 100) {
			$NsValue = $Global:NsNa.[string]$Global:NsNames[0]
			#Hrite-Host '63':$NsValue
		}
		
		$a = 0
		$c = $NodePath.Split('.').Count
		For ($j = 0; $j -lt $Global:NsNames.Count; $j++) {
			If ($Global:NsNa.[string]$Global:NsNames[$j] -eq $NsValue) { $a = 1; Break }
		}
		$nsName = 'a' + ($j + 1)
		$nodename = $Nodepath
		If ($c -gt 1) { $nodename = $NodePath | ForEach-Object{ $_.replace('.', '') } }
		If ($a -eq 0) {
			#Hrite-Host '77'$NsValue
			#Hrite-Host '77'$NodePath
			#Pause
			$b = Get-NsName
			$Global:NS.AddNamespace($b, $nsValue)
			$nsName = 'a' + $Global:NsNr
			$Global:NsNa.Add($nsName, $nsValue)
		}
		$Global:NsNode.Add($nodename, $nsName)
		#Hrite-Host '86'$nodename' :'$nsName
		Return 'ok'
	}
	$Global:Wk = ''
	
	#------ HjelpeArrays for Xml ------
	[xml]$Global:xml = New-Object System.Xml.XmlDocument
	[int]$Global:NsNr = 0
	[array]$Global:NsNames = @()
	[hashtable]$Global:NsNa = @{ }
	[hashtable]$Global:NsNode = @{ }
	[hashtable]$Global:NodeType = @{ }
	[array]$Global:Allnodes = @()
	[string]$Global:AppvFile = ''
	#$global:FF = @{ }
	#endregion
#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Show-ChildForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formChildForm = New-Object 'System.Windows.Forms.Form'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formChildForm_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formChildForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$formChildForm.remove_Load($formChildForm_Load)
			$formChildForm.remove_Load($Form_StateCorrection_Load)
			$formChildForm.remove_Closing($Form_StoreValues_Closing)
			$formChildForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formChildForm.SuspendLayout()
	#
	# formChildForm
	#
	$formChildForm.Controls.Add($buttonOK)
	$formChildForm.Controls.Add($buttonCancel)
	$formChildForm.AutoScaleDimensions = '6, 13'
	$formChildForm.AutoScaleMode = 'Font'
	$formChildForm.ClientSize = '284, 262'
	$formChildForm.Margin = '4, 4, 4, 4'
	$formChildForm.Name = 'formChildForm'
	$formChildForm.StartPosition = 'CenterParent'
	$formChildForm.Text = 'Child Form'
	$formChildForm.add_Load($formChildForm_Load)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '116, 227'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '197, 227'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	$formChildForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formChildForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formChildForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formChildForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formChildForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formChildForm.ShowDialog()

}
#endregion Source: ChildForm.psf

#Start the application
Main ($CommandLine)
